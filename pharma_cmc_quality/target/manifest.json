{"child_map":{},"disabled":{},"docs":{},"exposures":{},"group_map":{},"groups":{},"macros":{"macro.dbt._bigquery__get_matching_schemata":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}","meta":{},"name":"_bigquery__get_matching_schemata","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/get_relations_by_pattern_sql.sql","package_name":"dbt","path":"macros/relations/get_relations_by_pattern_sql.sql","resource_type":"macro","unique_id":"macro.dbt._bigquery__get_matching_schemata"},"macro.dbt._split_part_negative":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}","meta":{},"name":"_split_part_negative","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/split_part.sql","package_name":"dbt","path":"macros/utils/split_part.sql","resource_type":"macro","unique_id":"macro.dbt._split_part_negative"},"macro.dbt.after_commit":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}","meta":{},"name":"after_commit","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/hooks.sql","package_name":"dbt","path":"macros/materializations/hooks.sql","resource_type":"macro","unique_id":"macro.dbt.after_commit"},"macro.dbt.alter_column_comment":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}","meta":{},"name":"alter_column_comment","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/persist_docs.sql","package_name":"dbt","path":"macros/adapters/persist_docs.sql","resource_type":"macro","unique_id":"macro.dbt.alter_column_comment"},"macro.dbt.alter_column_type":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}","meta":{},"name":"alter_column_type","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/columns.sql","package_name":"dbt","path":"macros/adapters/columns.sql","resource_type":"macro","unique_id":"macro.dbt.alter_column_type"},"macro.dbt.alter_relation_add_remove_columns":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}","meta":{},"name":"alter_relation_add_remove_columns","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/columns.sql","package_name":"dbt","path":"macros/adapters/columns.sql","resource_type":"macro","unique_id":"macro.dbt.alter_relation_add_remove_columns"},"macro.dbt.alter_relation_comment":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}","meta":{},"name":"alter_relation_comment","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/persist_docs.sql","package_name":"dbt","path":"macros/adapters/persist_docs.sql","resource_type":"macro","unique_id":"macro.dbt.alter_relation_comment"},"macro.dbt.any_value":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}","meta":{},"name":"any_value","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/any_value.sql","package_name":"dbt","path":"macros/utils/any_value.sql","resource_type":"macro","unique_id":"macro.dbt.any_value"},"macro.dbt.apply_grants":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}","meta":{},"name":"apply_grants","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/apply_grants.sql","package_name":"dbt","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt.apply_grants"},"macro.dbt.array_append":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}","meta":{},"name":"array_append","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/array_append.sql","package_name":"dbt","path":"macros/utils/array_append.sql","resource_type":"macro","unique_id":"macro.dbt.array_append"},"macro.dbt.array_concat":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}","meta":{},"name":"array_concat","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/array_concat.sql","package_name":"dbt","path":"macros/utils/array_concat.sql","resource_type":"macro","unique_id":"macro.dbt.array_concat"},"macro.dbt.array_construct":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}","meta":{},"name":"array_construct","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/array_construct.sql","package_name":"dbt","path":"macros/utils/array_construct.sql","resource_type":"macro","unique_id":"macro.dbt.array_construct"},"macro.dbt.assert_columns_equivalent":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}","meta":{},"name":"assert_columns_equivalent","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/column/columns_spec_ddl.sql","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","resource_type":"macro","unique_id":"macro.dbt.assert_columns_equivalent"},"macro.dbt.before_begin":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}","meta":{},"name":"before_begin","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/hooks.sql","package_name":"dbt","path":"macros/materializations/hooks.sql","resource_type":"macro","unique_id":"macro.dbt.before_begin"},"macro.dbt.bigquery__get_tables_by_pattern_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=_bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ adapter.dispatch('get_table_types_sql')() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}","meta":{},"name":"bigquery__get_tables_by_pattern_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/get_relations_by_pattern_sql.sql","package_name":"dbt","path":"macros/relations/get_relations_by_pattern_sql.sql","resource_type":"macro","unique_id":"macro.dbt.bigquery__get_tables_by_pattern_sql"},"macro.dbt.bigquery__t_database_name":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bigquery__t_database_name() %}\n  {{ return(env_var('GOOGLE_CLOUD_PROJECT')) }}\n{% endmacro %}","meta":{},"name":"bigquery__t_database_name","original_file_path":"dbt_internal_packages/dbt-adapters/macros/internal/test/names.sql","package_name":"dbt","path":"macros/internal/test/names.sql","resource_type":"macro","unique_id":"macro.dbt.bigquery__t_database_name"},"macro.dbt.bool_or":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}","meta":{},"name":"bool_or","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/bool_or.sql","package_name":"dbt","path":"macros/utils/bool_or.sql","resource_type":"macro","unique_id":"macro.dbt.bool_or"},"macro.dbt.build_config_dict":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}","meta":{},"name":"build_config_dict","original_file_path":"dbt_internal_packages/dbt-adapters/macros/python_model/python.sql","package_name":"dbt","path":"macros/python_model/python.sql","resource_type":"macro","unique_id":"macro.dbt.build_config_dict"},"macro.dbt.build_ref_function":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n\n        {#\n            We want to get the string of the returned relation by calling .render() in order to skip sample/empty\n            mode rendering logic. However, people override the default ref macro, and often return a string instead\n            of a relation (like the ref macro does by default). Thus, to make sure we dont blow things up, we have\n            to ensure the resolved relation has a .render() method.\n        #}\n        {%- if resolved.render is defined and resolved.render is callable -%}\n            {%- set resolved = resolved.render() -%}\n        {%- endif -%}\n\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}","meta":{},"name":"build_ref_function","original_file_path":"dbt_internal_packages/dbt-adapters/macros/python_model/python.sql","package_name":"dbt","path":"macros/python_model/python.sql","resource_type":"macro","unique_id":"macro.dbt.build_ref_function"},"macro.dbt.build_snapshot_staging_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}","meta":{},"name":"build_snapshot_staging_table","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.build_snapshot_staging_table"},"macro.dbt.build_snapshot_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}","meta":{},"name":"build_snapshot_table","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.build_snapshot_table"},"macro.dbt.build_source_function":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}","meta":{},"name":"build_source_function","original_file_path":"dbt_internal_packages/dbt-adapters/macros/python_model/python.sql","package_name":"dbt","path":"macros/python_model/python.sql","resource_type":"macro","unique_id":"macro.dbt.build_source_function"},"macro.dbt.call_dcl_statements":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}","meta":{},"name":"call_dcl_statements","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/apply_grants.sql","package_name":"dbt","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt.call_dcl_statements"},"macro.dbt.can_clone_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}","meta":{},"name":"can_clone_table","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/clone/can_clone_table.sql","package_name":"dbt","path":"macros/materializations/models/clone/can_clone_table.sql","resource_type":"macro","unique_id":"macro.dbt.can_clone_table"},"macro.dbt.cast":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}","meta":{},"name":"cast","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/cast.sql","package_name":"dbt","path":"macros/utils/cast.sql","resource_type":"macro","unique_id":"macro.dbt.cast"},"macro.dbt.cast_bool_to_text":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}","meta":{},"name":"cast_bool_to_text","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/cast_bool_to_text.sql","package_name":"dbt","path":"macros/utils/cast_bool_to_text.sql","resource_type":"macro","unique_id":"macro.dbt.cast_bool_to_text"},"macro.dbt.check_for_schema_changes":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}","meta":{},"name":"check_for_schema_changes","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/on_schema_change.sql","package_name":"dbt","path":"macros/materializations/models/incremental/on_schema_change.sql","resource_type":"macro","unique_id":"macro.dbt.check_for_schema_changes"},"macro.dbt.check_schema_exists":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}","meta":{},"name":"check_schema_exists","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/metadata.sql","package_name":"dbt","path":"macros/adapters/metadata.sql","resource_type":"macro","unique_id":"macro.dbt.check_schema_exists"},"macro.dbt.check_time_data_types":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}","meta":{},"name":"check_time_data_types","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.check_time_data_types"},"macro.dbt.collect_freshness":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}","meta":{},"name":"collect_freshness","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/freshness.sql","package_name":"dbt","path":"macros/adapters/freshness.sql","resource_type":"macro","unique_id":"macro.dbt.collect_freshness"},"macro.dbt.collect_freshness_custom_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro collect_freshness_custom_sql(source, loaded_at_query) %}\n  {{ return(adapter.dispatch('collect_freshness_custom_sql', 'dbt')(source, loaded_at_query))}}\n{% endmacro %}","meta":{},"name":"collect_freshness_custom_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/freshness.sql","package_name":"dbt","path":"macros/adapters/freshness.sql","resource_type":"macro","unique_id":"macro.dbt.collect_freshness_custom_sql"},"macro.dbt.concat":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}","meta":{},"name":"concat","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/concat.sql","package_name":"dbt","path":"macros/utils/concat.sql","resource_type":"macro","unique_id":"macro.dbt.concat"},"macro.dbt.convert_datetime":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}","meta":{},"name":"convert_datetime","original_file_path":"dbt_internal_packages/dbt-adapters/macros/etc/datetime.sql","package_name":"dbt","path":"macros/etc/datetime.sql","resource_type":"macro","unique_id":"macro.dbt.convert_datetime"},"macro.dbt.copy_grants":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}","meta":{},"name":"copy_grants","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/apply_grants.sql","package_name":"dbt","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt.copy_grants"},"macro.dbt.create_columns":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}","meta":{},"name":"create_columns","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.create_columns"},"macro.dbt.create_csv_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}","meta":{},"name":"create_csv_table","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/seeds/helpers.sql","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.create_csv_table"},"macro.dbt.create_indexes":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}","meta":{},"name":"create_indexes","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/indexes.sql","package_name":"dbt","path":"macros/adapters/indexes.sql","resource_type":"macro","unique_id":"macro.dbt.create_indexes"},"macro.dbt.create_or_replace_clone":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}","meta":{},"name":"create_or_replace_clone","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/clone/create_or_replace_clone.sql","package_name":"dbt","path":"macros/materializations/models/clone/create_or_replace_clone.sql","resource_type":"macro","unique_id":"macro.dbt.create_or_replace_clone"},"macro.dbt.create_or_replace_view":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}","meta":{},"name":"create_or_replace_view","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/view/replace.sql","package_name":"dbt","path":"macros/relations/view/replace.sql","resource_type":"macro","unique_id":"macro.dbt.create_or_replace_view"},"macro.dbt.create_schema":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}","meta":{},"name":"create_schema","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/schema.sql","package_name":"dbt","path":"macros/adapters/schema.sql","resource_type":"macro","unique_id":"macro.dbt.create_schema"},"macro.dbt.create_table_as":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}","meta":{},"name":"create_table_as","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/table/create.sql","package_name":"dbt","path":"macros/relations/table/create.sql","resource_type":"macro","unique_id":"macro.dbt.create_table_as"},"macro.dbt.create_view_as":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}","meta":{},"name":"create_view_as","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/view/create.sql","package_name":"dbt","path":"macros/relations/view/create.sql","resource_type":"macro","unique_id":"macro.dbt.create_view_as"},"macro.dbt.current_timestamp":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n","meta":{},"name":"current_timestamp","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/timestamps.sql","package_name":"dbt","path":"macros/adapters/timestamps.sql","resource_type":"macro","unique_id":"macro.dbt.current_timestamp"},"macro.dbt.current_timestamp_backcompat":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}","meta":{},"name":"current_timestamp_backcompat","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/timestamps.sql","package_name":"dbt","path":"macros/adapters/timestamps.sql","resource_type":"macro","unique_id":"macro.dbt.current_timestamp_backcompat"},"macro.dbt.current_timestamp_in_utc_backcompat":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}","meta":{},"name":"current_timestamp_in_utc_backcompat","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/timestamps.sql","package_name":"dbt","path":"macros/adapters/timestamps.sql","resource_type":"macro","unique_id":"macro.dbt.current_timestamp_in_utc_backcompat"},"macro.dbt.databricks__get_table_types_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}","meta":{},"name":"databricks__get_table_types_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/get_table_types_sql.sql","package_name":"dbt","path":"macros/relations/get_table_types_sql.sql","resource_type":"macro","unique_id":"macro.dbt.databricks__get_table_types_sql"},"macro.dbt.databricks__t_database_name":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro databricks__t_database_name() %}\n  {{ return(env_var('DATABRICKS_CATALOG')) }}\n{% endmacro %}","meta":{},"name":"databricks__t_database_name","original_file_path":"dbt_internal_packages/dbt-adapters/macros/internal/test/names.sql","package_name":"dbt","path":"macros/internal/test/names.sql","resource_type":"macro","unique_id":"macro.dbt.databricks__t_database_name"},"macro.dbt.date":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}","meta":{},"name":"date","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/date.sql","package_name":"dbt","path":"macros/utils/date.sql","resource_type":"macro","unique_id":"macro.dbt.date"},"macro.dbt.date_spine":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}","meta":{},"name":"date_spine","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/date_spine.sql","package_name":"dbt","path":"macros/utils/date_spine.sql","resource_type":"macro","unique_id":"macro.dbt.date_spine"},"macro.dbt.date_trunc":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}","meta":{},"name":"date_trunc","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/date_trunc.sql","package_name":"dbt","path":"macros/utils/date_trunc.sql","resource_type":"macro","unique_id":"macro.dbt.date_trunc"},"macro.dbt.dateadd":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}","meta":{},"name":"dateadd","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/dateadd.sql","package_name":"dbt","path":"macros/utils/dateadd.sql","resource_type":"macro","unique_id":"macro.dbt.dateadd"},"macro.dbt.datediff":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}","meta":{},"name":"datediff","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/datediff.sql","package_name":"dbt","path":"macros/utils/datediff.sql","resource_type":"macro","unique_id":"macro.dbt.datediff"},"macro.dbt.dates_in_range":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}","meta":{},"name":"dates_in_range","original_file_path":"dbt_internal_packages/dbt-adapters/macros/etc/datetime.sql","package_name":"dbt","path":"macros/etc/datetime.sql","resource_type":"macro","unique_id":"macro.dbt.dates_in_range"},"macro.dbt.default__alter_column_comment":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}","meta":{},"name":"default__alter_column_comment","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/persist_docs.sql","package_name":"dbt","path":"macros/adapters/persist_docs.sql","resource_type":"macro","unique_id":"macro.dbt.default__alter_column_comment"},"macro.dbt.default__alter_column_type":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}","meta":{},"name":"default__alter_column_type","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/columns.sql","package_name":"dbt","path":"macros/adapters/columns.sql","resource_type":"macro","unique_id":"macro.dbt.default__alter_column_type"},"macro.dbt.default__alter_relation_add_remove_columns":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}","meta":{},"name":"default__alter_relation_add_remove_columns","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/columns.sql","package_name":"dbt","path":"macros/adapters/columns.sql","resource_type":"macro","unique_id":"macro.dbt.default__alter_relation_add_remove_columns"},"macro.dbt.default__alter_relation_comment":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}","meta":{},"name":"default__alter_relation_comment","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/persist_docs.sql","package_name":"dbt","path":"macros/adapters/persist_docs.sql","resource_type":"macro","unique_id":"macro.dbt.default__alter_relation_comment"},"macro.dbt.default__any_value":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}","meta":{},"name":"default__any_value","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/any_value.sql","package_name":"dbt","path":"macros/utils/any_value.sql","resource_type":"macro","unique_id":"macro.dbt.default__any_value"},"macro.dbt.default__apply_grants":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__apply_grants(relation, grant_config, should_revoke) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}","meta":{},"name":"default__apply_grants","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/apply_grants.sql","package_name":"dbt","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt.default__apply_grants"},"macro.dbt.default__array_append":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}","meta":{},"name":"default__array_append","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/array_append.sql","package_name":"dbt","path":"macros/utils/array_append.sql","resource_type":"macro","unique_id":"macro.dbt.default__array_append"},"macro.dbt.default__array_concat":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}","meta":{},"name":"default__array_concat","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/array_concat.sql","package_name":"dbt","path":"macros/utils/array_concat.sql","resource_type":"macro","unique_id":"macro.dbt.default__array_concat"},"macro.dbt.default__array_construct":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}","meta":{},"name":"default__array_construct","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/array_construct.sql","package_name":"dbt","path":"macros/utils/array_construct.sql","resource_type":"macro","unique_id":"macro.dbt.default__array_construct"},"macro.dbt.default__bool_or":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}","meta":{},"name":"default__bool_or","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/bool_or.sql","package_name":"dbt","path":"macros/utils/bool_or.sql","resource_type":"macro","unique_id":"macro.dbt.default__bool_or"},"macro.dbt.default__build_snapshot_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}","meta":{},"name":"default__build_snapshot_table","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.default__build_snapshot_table"},"macro.dbt.default__call_dcl_statements":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}","meta":{},"name":"default__call_dcl_statements","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/apply_grants.sql","package_name":"dbt","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt.default__call_dcl_statements"},"macro.dbt.default__can_clone_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}","meta":{},"name":"default__can_clone_table","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/clone/can_clone_table.sql","package_name":"dbt","path":"macros/materializations/models/clone/can_clone_table.sql","resource_type":"macro","unique_id":"macro.dbt.default__can_clone_table"},"macro.dbt.default__cast":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}","meta":{},"name":"default__cast","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/cast.sql","package_name":"dbt","path":"macros/utils/cast.sql","resource_type":"macro","unique_id":"macro.dbt.default__cast"},"macro.dbt.default__cast_bool_to_text":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}","meta":{},"name":"default__cast_bool_to_text","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/cast_bool_to_text.sql","package_name":"dbt","path":"macros/utils/cast_bool_to_text.sql","resource_type":"macro","unique_id":"macro.dbt.default__cast_bool_to_text"},"macro.dbt.default__check_schema_exists":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}","meta":{},"name":"default__check_schema_exists","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/metadata.sql","package_name":"dbt","path":"macros/adapters/metadata.sql","resource_type":"macro","unique_id":"macro.dbt.default__check_schema_exists"},"macro.dbt.default__collect_freshness":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}","meta":{},"name":"default__collect_freshness","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/freshness.sql","package_name":"dbt","path":"macros/adapters/freshness.sql","resource_type":"macro","unique_id":"macro.dbt.default__collect_freshness"},"macro.dbt.default__collect_freshness_custom_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__collect_freshness_custom_sql(source, loaded_at_query) %}\n  {% call statement('collect_freshness_custom_sql', fetch_result=True, auto_begin=False) -%}\n  with source_query as (\n    {{ loaded_at_query }}\n  )\n  select\n    (select * from source_query) as max_loaded_at,\n    {{ current_timestamp() }} as snapshotted_at\n  {% endcall %}\n  {{ return(load_result('collect_freshness_custom_sql')) }}\n{% endmacro %}","meta":{},"name":"default__collect_freshness_custom_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/freshness.sql","package_name":"dbt","path":"macros/adapters/freshness.sql","resource_type":"macro","unique_id":"macro.dbt.default__collect_freshness_custom_sql"},"macro.dbt.default__concat":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}","meta":{},"name":"default__concat","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/concat.sql","package_name":"dbt","path":"macros/utils/concat.sql","resource_type":"macro","unique_id":"macro.dbt.default__concat"},"macro.dbt.default__copy_grants":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}","meta":{},"name":"default__copy_grants","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/apply_grants.sql","package_name":"dbt","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt.default__copy_grants"},"macro.dbt.default__create_columns":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}","meta":{},"name":"default__create_columns","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.default__create_columns"},"macro.dbt.default__create_csv_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}","meta":{},"name":"default__create_csv_table","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/seeds/helpers.sql","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.default__create_csv_table"},"macro.dbt.default__create_indexes":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}","meta":{},"name":"default__create_indexes","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/indexes.sql","package_name":"dbt","path":"macros/adapters/indexes.sql","resource_type":"macro","unique_id":"macro.dbt.default__create_indexes"},"macro.dbt.default__create_or_replace_clone":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}","meta":{},"name":"default__create_or_replace_clone","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/clone/create_or_replace_clone.sql","package_name":"dbt","path":"macros/materializations/models/clone/create_or_replace_clone.sql","resource_type":"macro","unique_id":"macro.dbt.default__create_or_replace_clone"},"macro.dbt.default__create_schema":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}","meta":{},"name":"default__create_schema","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/schema.sql","package_name":"dbt","path":"macros/adapters/schema.sql","resource_type":"macro","unique_id":"macro.dbt.default__create_schema"},"macro.dbt.default__create_table_as":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}","meta":{},"name":"default__create_table_as","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/table/create.sql","package_name":"dbt","path":"macros/relations/table/create.sql","resource_type":"macro","unique_id":"macro.dbt.default__create_table_as"},"macro.dbt.default__create_view_as":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}","meta":{},"name":"default__create_view_as","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/view/create.sql","package_name":"dbt","path":"macros/relations/view/create.sql","resource_type":"macro","unique_id":"macro.dbt.default__create_view_as"},"macro.dbt.default__current_timestamp":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}","meta":{},"name":"default__current_timestamp","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/timestamps.sql","package_name":"dbt","path":"macros/adapters/timestamps.sql","resource_type":"macro","unique_id":"macro.dbt.default__current_timestamp"},"macro.dbt.default__current_timestamp_backcompat":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}","meta":{},"name":"default__current_timestamp_backcompat","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/timestamps.sql","package_name":"dbt","path":"macros/adapters/timestamps.sql","resource_type":"macro","unique_id":"macro.dbt.default__current_timestamp_backcompat"},"macro.dbt.default__current_timestamp_in_utc_backcompat":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}","meta":{},"name":"default__current_timestamp_in_utc_backcompat","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/timestamps.sql","package_name":"dbt","path":"macros/adapters/timestamps.sql","resource_type":"macro","unique_id":"macro.dbt.default__current_timestamp_in_utc_backcompat"},"macro.dbt.default__date":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}","meta":{},"name":"default__date","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/date.sql","package_name":"dbt","path":"macros/utils/date.sql","resource_type":"macro","unique_id":"macro.dbt.default__date"},"macro.dbt.default__date_spine":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}","meta":{},"name":"default__date_spine","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/date_spine.sql","package_name":"dbt","path":"macros/utils/date_spine.sql","resource_type":"macro","unique_id":"macro.dbt.default__date_spine"},"macro.dbt.default__date_trunc":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}","meta":{},"name":"default__date_trunc","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/date_trunc.sql","package_name":"dbt","path":"macros/utils/date_trunc.sql","resource_type":"macro","unique_id":"macro.dbt.default__date_trunc"},"macro.dbt.default__dateadd":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}","meta":{},"name":"default__dateadd","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/dateadd.sql","package_name":"dbt","path":"macros/utils/dateadd.sql","resource_type":"macro","unique_id":"macro.dbt.default__dateadd"},"macro.dbt.default__datediff":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}","meta":{},"name":"default__datediff","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/datediff.sql","package_name":"dbt","path":"macros/utils/datediff.sql","resource_type":"macro","unique_id":"macro.dbt.default__datediff"},"macro.dbt.default__drop_materialized_view":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}","meta":{},"name":"default__drop_materialized_view","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/materialized_view/drop.sql","package_name":"dbt","path":"macros/relations/materialized_view/drop.sql","resource_type":"macro","unique_id":"macro.dbt.default__drop_materialized_view"},"macro.dbt.default__drop_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}","meta":{},"name":"default__drop_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/drop.sql","package_name":"dbt","path":"macros/relations/drop.sql","resource_type":"macro","unique_id":"macro.dbt.default__drop_relation"},"macro.dbt.default__drop_schema":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}","meta":{},"name":"default__drop_schema","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/schema.sql","package_name":"dbt","path":"macros/adapters/schema.sql","resource_type":"macro","unique_id":"macro.dbt.default__drop_schema"},"macro.dbt.default__drop_schema_named":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}","meta":{},"name":"default__drop_schema_named","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/schema.sql","package_name":"dbt","path":"macros/relations/schema.sql","resource_type":"macro","unique_id":"macro.dbt.default__drop_schema_named"},"macro.dbt.default__drop_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}","meta":{},"name":"default__drop_table","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/table/drop.sql","package_name":"dbt","path":"macros/relations/table/drop.sql","resource_type":"macro","unique_id":"macro.dbt.default__drop_table"},"macro.dbt.default__drop_view":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}","meta":{},"name":"default__drop_view","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/view/drop.sql","package_name":"dbt","path":"macros/relations/view/drop.sql","resource_type":"macro","unique_id":"macro.dbt.default__drop_view"},"macro.dbt.default__equals":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__equals(expr1, expr2) -%}\n{%- if adapter.behavior.enable_truthy_nulls_equals_macro.no_warn %}\n    case when (({{ expr1 }} = {{ expr2 }}) or ({{ expr1 }} is null and {{ expr2 }} is null))\n        then 0\n        else 1\n    end = 0\n{%- else -%}\n    ({{ expr1 }} = {{ expr2 }})\n{%- endif %}\n{% endmacro %}","meta":{},"name":"default__equals","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/equals.sql","package_name":"dbt","path":"macros/utils/equals.sql","resource_type":"macro","unique_id":"macro.dbt.default__equals"},"macro.dbt.default__escape_single_quotes":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}","meta":{},"name":"default__escape_single_quotes","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/escape_single_quotes.sql","package_name":"dbt","path":"macros/utils/escape_single_quotes.sql","resource_type":"macro","unique_id":"macro.dbt.default__escape_single_quotes"},"macro.dbt.default__except":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__except() %}\n\n    except\n\n{% endmacro %}","meta":{},"name":"default__except","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/except.sql","package_name":"dbt","path":"macros/utils/except.sql","resource_type":"macro","unique_id":"macro.dbt.default__except"},"macro.dbt.default__format_column":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}","meta":{},"name":"default__format_column","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/column/columns_spec_ddl.sql","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","resource_type":"macro","unique_id":"macro.dbt.default__format_column"},"macro.dbt.default__generate_alias_name":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node -%}\n\n        {% if node.version -%}\n            {{ node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\")) }}\n        {%- else -%}\n            {{ node.name }}\n        {%- endif -%}\n    \n    {%- endif -%}\n\n{%- endmacro %}","meta":{},"name":"default__generate_alias_name","original_file_path":"dbt_internal_packages/dbt-adapters/macros/get_custom_name/get_custom_alias.sql","package_name":"dbt","path":"macros/get_custom_name/get_custom_alias.sql","resource_type":"macro","unique_id":"macro.dbt.default__generate_alias_name"},"macro.dbt.default__generate_database_name":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}","meta":{},"name":"default__generate_database_name","original_file_path":"dbt_internal_packages/dbt-adapters/macros/get_custom_name/get_custom_database.sql","package_name":"dbt","path":"macros/get_custom_name/get_custom_database.sql","resource_type":"macro","unique_id":"macro.dbt.default__generate_database_name"},"macro.dbt.default__generate_schema_name":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}","meta":{},"name":"default__generate_schema_name","original_file_path":"dbt_internal_packages/dbt-adapters/macros/get_custom_name/get_custom_schema.sql","package_name":"dbt","path":"macros/get_custom_name/get_custom_schema.sql","resource_type":"macro","unique_id":"macro.dbt.default__generate_schema_name"},"macro.dbt.default__generate_series":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}","meta":{},"name":"default__generate_series","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/generate_series.sql","package_name":"dbt","path":"macros/utils/generate_series.sql","resource_type":"macro","unique_id":"macro.dbt.default__generate_series"},"macro.dbt.default__get_alter_materialized_view_as_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}","meta":{},"name":"default__get_alter_materialized_view_as_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/materialized_view/alter.sql","package_name":"dbt","path":"macros/relations/materialized_view/alter.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_alter_materialized_view_as_sql"},"macro.dbt.default__get_assert_columns_equivalent":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}","meta":{},"name":"default__get_assert_columns_equivalent","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/column/columns_spec_ddl.sql","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_assert_columns_equivalent"},"macro.dbt.default__get_batch_size":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}","meta":{},"name":"default__get_batch_size","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/seeds/helpers.sql","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_batch_size"},"macro.dbt.default__get_binding_char":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}","meta":{},"name":"default__get_binding_char","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/seeds/helpers.sql","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_binding_char"},"macro.dbt.default__get_catalog":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}","meta":{},"name":"default__get_catalog","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/metadata.sql","package_name":"dbt","path":"macros/adapters/metadata.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_catalog"},"macro.dbt.default__get_catalog_for_single_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}","meta":{},"name":"default__get_catalog_for_single_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/metadata.sql","package_name":"dbt","path":"macros/adapters/metadata.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_catalog_for_single_relation"},"macro.dbt.default__get_catalog_relations":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}","meta":{},"name":"default__get_catalog_relations","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/metadata.sql","package_name":"dbt","path":"macros/adapters/metadata.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_catalog_relations"},"macro.dbt.default__get_column_names":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}","meta":{},"name":"default__get_column_names","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/table/create.sql","package_name":"dbt","path":"macros/relations/table/create.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_column_names"},"macro.dbt.default__get_columns_in_query":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}","meta":{},"name":"default__get_columns_in_query","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/columns.sql","package_name":"dbt","path":"macros/adapters/columns.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_columns_in_query"},"macro.dbt.default__get_columns_in_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}","meta":{},"name":"default__get_columns_in_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/columns.sql","package_name":"dbt","path":"macros/adapters/columns.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_columns_in_relation"},"macro.dbt.default__get_create_backup_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}","meta":{},"name":"default__get_create_backup_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/create_backup.sql","package_name":"dbt","path":"macros/relations/create_backup.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_create_backup_sql"},"macro.dbt.default__get_create_index_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}","meta":{},"name":"default__get_create_index_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/indexes.sql","package_name":"dbt","path":"macros/adapters/indexes.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_create_index_sql"},"macro.dbt.default__get_create_intermediate_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}","meta":{},"name":"default__get_create_intermediate_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/create_intermediate.sql","package_name":"dbt","path":"macros/relations/create_intermediate.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_create_intermediate_sql"},"macro.dbt.default__get_create_materialized_view_as_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","meta":{},"name":"default__get_create_materialized_view_as_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/materialized_view/create.sql","package_name":"dbt","path":"macros/relations/materialized_view/create.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_create_materialized_view_as_sql"},"macro.dbt.default__get_create_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}","meta":{},"name":"default__get_create_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/create.sql","package_name":"dbt","path":"macros/relations/create.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_create_sql"},"macro.dbt.default__get_create_table_as_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}","meta":{},"name":"default__get_create_table_as_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/table/create.sql","package_name":"dbt","path":"macros/relations/table/create.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_create_table_as_sql"},"macro.dbt.default__get_create_view_as_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}","meta":{},"name":"default__get_create_view_as_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/view/create.sql","package_name":"dbt","path":"macros/relations/view/create.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_create_view_as_sql"},"macro.dbt.default__get_csv_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}","meta":{},"name":"default__get_csv_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/seeds/helpers.sql","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_csv_sql"},"macro.dbt.default__get_dcl_statement_list":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}","meta":{},"name":"default__get_dcl_statement_list","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/apply_grants.sql","package_name":"dbt","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_dcl_statement_list"},"macro.dbt.default__get_delete_insert_merge_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is string %}\n        {% set unique_key = [unique_key] %}\n        {% endif %}\n\n        {%- set unique_key_str = unique_key|join(', ') -%}\n\n        delete from {{ target }} as DBT_INTERNAL_DEST\n        where ({{ unique_key_str }}) in (\n            select distinct {{ unique_key_str }}\n            from {{ source }} as DBT_INTERNAL_SOURCE\n        )\n        {%- if incremental_predicates %}\n            {% for predicate in incremental_predicates %}\n                and {{ predicate }}\n            {% endfor %}\n        {%- endif -%};\n\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}","meta":{},"name":"default__get_delete_insert_merge_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/merge.sql","package_name":"dbt","path":"macros/materializations/models/incremental/merge.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_delete_insert_merge_sql"},"macro.dbt.default__get_drop_backup_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}","meta":{},"name":"default__get_drop_backup_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/drop_backup.sql","package_name":"dbt","path":"macros/relations/drop_backup.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_drop_backup_sql"},"macro.dbt.default__get_drop_index_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}","meta":{},"name":"default__get_drop_index_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/indexes.sql","package_name":"dbt","path":"macros/adapters/indexes.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_drop_index_sql"},"macro.dbt.default__get_drop_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n","meta":{},"name":"default__get_drop_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/drop.sql","package_name":"dbt","path":"macros/relations/drop.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_drop_sql"},"macro.dbt.default__get_empty_schema_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}","meta":{},"name":"default__get_empty_schema_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/columns.sql","package_name":"dbt","path":"macros/adapters/columns.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_empty_schema_sql"},"macro.dbt.default__get_empty_subquery_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}","meta":{},"name":"default__get_empty_subquery_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/columns.sql","package_name":"dbt","path":"macros/adapters/columns.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_empty_subquery_sql"},"macro.dbt.default__get_grant_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n","meta":{},"name":"default__get_grant_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/apply_grants.sql","package_name":"dbt","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_grant_sql"},"macro.dbt.default__get_incremental_append_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}","meta":{},"name":"default__get_incremental_append_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/strategies.sql","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_incremental_append_sql"},"macro.dbt.default__get_incremental_default_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}","meta":{},"name":"default__get_incremental_default_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/strategies.sql","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_incremental_default_sql"},"macro.dbt.default__get_incremental_delete_insert_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}","meta":{},"name":"default__get_incremental_delete_insert_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/strategies.sql","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_incremental_delete_insert_sql"},"macro.dbt.default__get_incremental_insert_overwrite_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}","meta":{},"name":"default__get_incremental_insert_overwrite_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/strategies.sql","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_incremental_insert_overwrite_sql"},"macro.dbt.default__get_incremental_merge_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}","meta":{},"name":"default__get_incremental_merge_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/strategies.sql","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_incremental_merge_sql"},"macro.dbt.default__get_incremental_microbatch_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}","meta":{},"name":"default__get_incremental_microbatch_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/strategies.sql","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_incremental_microbatch_sql"},"macro.dbt.default__get_insert_overwrite_merge_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}","meta":{},"name":"default__get_insert_overwrite_merge_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/merge.sql","package_name":"dbt","path":"macros/materializations/models/incremental/merge.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_insert_overwrite_merge_sql"},"macro.dbt.default__get_intervals_between":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}","meta":{},"name":"default__get_intervals_between","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/date_spine.sql","package_name":"dbt","path":"macros/utils/date_spine.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_intervals_between"},"macro.dbt.default__get_limit_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_limit_sql(sql, limit) %}\n  {{ sql }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}","meta":{},"name":"default__get_limit_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/show.sql","package_name":"dbt","path":"macros/adapters/show.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_limit_sql"},"macro.dbt.default__get_materialized_view_configuration_changes":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}","meta":{},"name":"default__get_materialized_view_configuration_changes","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/materialized_view/alter.sql","package_name":"dbt","path":"macros/relations/materialized_view/alter.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_materialized_view_configuration_changes"},"macro.dbt.default__get_merge_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set source_unique_key = (\"DBT_INTERNAL_SOURCE.\" ~ unique_key) | trim %}\n\t    {% set target_unique_key = (\"DBT_INTERNAL_DEST.\" ~ unique_key) | trim %}\n\t    {% set unique_key_match = equals(source_unique_key, target_unique_key) | trim %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}","meta":{},"name":"default__get_merge_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/merge.sql","package_name":"dbt","path":"macros/materializations/models/incremental/merge.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_merge_sql"},"macro.dbt.default__get_merge_update_columns":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}","meta":{},"name":"default__get_merge_update_columns","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/column_helpers.sql","package_name":"dbt","path":"macros/materializations/models/incremental/column_helpers.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_merge_update_columns"},"macro.dbt.default__get_or_create_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return((true, target_relation)) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return((false, new_relation)) %}\n{% endmacro %}","meta":{},"name":"default__get_or_create_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/relation.sql","package_name":"dbt","path":"macros/adapters/relation.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_or_create_relation"},"macro.dbt.default__get_powers_of_two":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}","meta":{},"name":"default__get_powers_of_two","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/generate_series.sql","package_name":"dbt","path":"macros/utils/generate_series.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_powers_of_two"},"macro.dbt.default__get_relation_last_modified":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}","meta":{},"name":"default__get_relation_last_modified","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/metadata.sql","package_name":"dbt","path":"macros/adapters/metadata.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_relation_last_modified"},"macro.dbt.default__get_relations":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}","meta":{},"name":"default__get_relations","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/metadata.sql","package_name":"dbt","path":"macros/adapters/metadata.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_relations"},"macro.dbt.default__get_relations_by_pattern_internal":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_relations_by_pattern_internal(schema_pattern, table_pattern, exclude='', database=target.database, quote_table=False, excluded_schemas=[]) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n        {{ adapter.dispatch('get_tables_by_pattern_sql')(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {% if row.table_schema not in excluded_schemas %}\n                {% if quote_table %}\n                {% set table_name = '\"' ~ row.table_name ~ '\"' %}\n                {% else %}\n                {% set table_name = row.table_name %}\n                {% endif %}\n                {%- set tbl_relation = api.Relation.create(\n                    database=database,\n                    schema=row.table_schema,\n                    identifier=table_name,\n                    type=row.table_type\n                ) -%}\n                {%- do tbl_relations.append(tbl_relation) -%}\n            {% endif %}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}","meta":{},"name":"default__get_relations_by_pattern_internal","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/get_relations_by_pattern.sql","package_name":"dbt","path":"macros/relations/get_relations_by_pattern.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_relations_by_pattern_internal"},"macro.dbt.default__get_rename_intermediate_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}","meta":{},"name":"default__get_rename_intermediate_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/rename_intermediate.sql","package_name":"dbt","path":"macros/relations/rename_intermediate.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_rename_intermediate_sql"},"macro.dbt.default__get_rename_materialized_view_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","meta":{},"name":"default__get_rename_materialized_view_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/materialized_view/rename.sql","package_name":"dbt","path":"macros/relations/materialized_view/rename.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_rename_materialized_view_sql"},"macro.dbt.default__get_rename_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n","meta":{},"name":"default__get_rename_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/rename.sql","package_name":"dbt","path":"macros/relations/rename.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_rename_sql"},"macro.dbt.default__get_rename_table_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","meta":{},"name":"default__get_rename_table_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/table/rename.sql","package_name":"dbt","path":"macros/relations/table/rename.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_rename_table_sql"},"macro.dbt.default__get_rename_view_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","meta":{},"name":"default__get_rename_view_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/view/rename.sql","package_name":"dbt","path":"macros/relations/view/rename.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_rename_view_sql"},"macro.dbt.default__get_replace_materialized_view_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","meta":{},"name":"default__get_replace_materialized_view_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/materialized_view/replace.sql","package_name":"dbt","path":"macros/relations/materialized_view/replace.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_replace_materialized_view_sql"},"macro.dbt.default__get_replace_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation.type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}","meta":{},"name":"default__get_replace_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/replace.sql","package_name":"dbt","path":"macros/relations/replace.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_replace_sql"},"macro.dbt.default__get_replace_table_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","meta":{},"name":"default__get_replace_table_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/table/replace.sql","package_name":"dbt","path":"macros/relations/table/replace.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_replace_table_sql"},"macro.dbt.default__get_replace_view_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}","meta":{},"name":"default__get_replace_view_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/view/replace.sql","package_name":"dbt","path":"macros/relations/view/replace.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_replace_view_sql"},"macro.dbt.default__get_revoke_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n","meta":{},"name":"default__get_revoke_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/apply_grants.sql","package_name":"dbt","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_revoke_sql"},"macro.dbt.default__get_select_subquery":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}","meta":{},"name":"default__get_select_subquery","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/table/create.sql","package_name":"dbt","path":"macros/relations/table/create.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_select_subquery"},"macro.dbt.default__get_show_grant_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}","meta":{},"name":"default__get_show_grant_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/apply_grants.sql","package_name":"dbt","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_show_grant_sql"},"macro.dbt.default__get_show_indexes_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}","meta":{},"name":"default__get_show_indexes_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/indexes.sql","package_name":"dbt","path":"macros/adapters/indexes.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_show_indexes_sql"},"macro.dbt.default__get_table_columns_and_constraints":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}","meta":{},"name":"default__get_table_columns_and_constraints","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/column/columns_spec_ddl.sql","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_table_columns_and_constraints"},"macro.dbt.default__get_table_types_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}","meta":{},"name":"default__get_table_types_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/get_table_types_sql.sql","package_name":"dbt","path":"macros/relations/get_table_types_sql.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_table_types_sql"},"macro.dbt.default__get_tables_by_pattern_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ adapter.dispatch('get_table_types_sql')() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}","meta":{},"name":"default__get_tables_by_pattern_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/get_relations_by_pattern_sql.sql","package_name":"dbt","path":"macros/relations/get_relations_by_pattern_sql.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_tables_by_pattern_sql"},"macro.dbt.default__get_test_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}","meta":{},"name":"default__get_test_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/tests/helpers.sql","package_name":"dbt","path":"macros/materializations/tests/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_test_sql"},"macro.dbt.default__get_true_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}","meta":{},"name":"default__get_true_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_true_sql"},"macro.dbt.default__get_unit_test_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}","meta":{},"name":"default__get_unit_test_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/tests/helpers.sql","package_name":"dbt","path":"macros/materializations/tests/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_unit_test_sql"},"macro.dbt.default__get_where_subquery":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}","meta":{},"name":"default__get_where_subquery","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/tests/where_subquery.sql","package_name":"dbt","path":"macros/materializations/tests/where_subquery.sql","resource_type":"macro","unique_id":"macro.dbt.default__get_where_subquery"},"macro.dbt.default__handle_existing_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}","meta":{},"name":"default__handle_existing_table","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/view/replace.sql","package_name":"dbt","path":"macros/relations/view/replace.sql","resource_type":"macro","unique_id":"macro.dbt.default__handle_existing_table"},"macro.dbt.default__hash":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}","meta":{},"name":"default__hash","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/hash.sql","package_name":"dbt","path":"macros/utils/hash.sql","resource_type":"macro","unique_id":"macro.dbt.default__hash"},"macro.dbt.default__information_schema_name":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}","meta":{},"name":"default__information_schema_name","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/metadata.sql","package_name":"dbt","path":"macros/adapters/metadata.sql","resource_type":"macro","unique_id":"macro.dbt.default__information_schema_name"},"macro.dbt.default__intersect":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}","meta":{},"name":"default__intersect","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/intersect.sql","package_name":"dbt","path":"macros/utils/intersect.sql","resource_type":"macro","unique_id":"macro.dbt.default__intersect"},"macro.dbt.default__last_day":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}","meta":{},"name":"default__last_day","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/last_day.sql","package_name":"dbt","path":"macros/utils/last_day.sql","resource_type":"macro","unique_id":"macro.dbt.default__last_day"},"macro.dbt.default__length":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}","meta":{},"name":"default__length","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/length.sql","package_name":"dbt","path":"macros/utils/length.sql","resource_type":"macro","unique_id":"macro.dbt.default__length"},"macro.dbt.default__list_relations_without_caching":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}","meta":{},"name":"default__list_relations_without_caching","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/metadata.sql","package_name":"dbt","path":"macros/adapters/metadata.sql","resource_type":"macro","unique_id":"macro.dbt.default__list_relations_without_caching"},"macro.dbt.default__list_schemas":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}","meta":{},"name":"default__list_schemas","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/metadata.sql","package_name":"dbt","path":"macros/adapters/metadata.sql","resource_type":"macro","unique_id":"macro.dbt.default__list_schemas"},"macro.dbt.default__listagg":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}","meta":{},"name":"default__listagg","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/listagg.sql","package_name":"dbt","path":"macros/utils/listagg.sql","resource_type":"macro","unique_id":"macro.dbt.default__listagg"},"macro.dbt.default__load_csv_rows":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}","meta":{},"name":"default__load_csv_rows","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/seeds/helpers.sql","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.default__load_csv_rows"},"macro.dbt.default__make_backup_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}","meta":{},"name":"default__make_backup_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/relation.sql","package_name":"dbt","path":"macros/adapters/relation.sql","resource_type":"macro","unique_id":"macro.dbt.default__make_backup_relation"},"macro.dbt.default__make_intermediate_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}","meta":{},"name":"default__make_intermediate_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/relation.sql","package_name":"dbt","path":"macros/adapters/relation.sql","resource_type":"macro","unique_id":"macro.dbt.default__make_intermediate_relation"},"macro.dbt.default__make_temp_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}","meta":{},"name":"default__make_temp_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/relation.sql","package_name":"dbt","path":"macros/adapters/relation.sql","resource_type":"macro","unique_id":"macro.dbt.default__make_temp_relation"},"macro.dbt.default__persist_docs":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}","meta":{},"name":"default__persist_docs","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/persist_docs.sql","package_name":"dbt","path":"macros/adapters/persist_docs.sql","resource_type":"macro","unique_id":"macro.dbt.default__persist_docs"},"macro.dbt.default__position":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}","meta":{},"name":"default__position","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/position.sql","package_name":"dbt","path":"macros/utils/position.sql","resource_type":"macro","unique_id":"macro.dbt.default__position"},"macro.dbt.default__post_snapshot":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}","meta":{},"name":"default__post_snapshot","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.default__post_snapshot"},"macro.dbt.default__refresh_materialized_view":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}","meta":{},"name":"default__refresh_materialized_view","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/materialized_view/refresh.sql","package_name":"dbt","path":"macros/relations/materialized_view/refresh.sql","resource_type":"macro","unique_id":"macro.dbt.default__refresh_materialized_view"},"macro.dbt.default__rename_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}","meta":{},"name":"default__rename_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/rename.sql","package_name":"dbt","path":"macros/relations/rename.sql","resource_type":"macro","unique_id":"macro.dbt.default__rename_relation"},"macro.dbt.default__replace":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}","meta":{},"name":"default__replace","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/replace.sql","package_name":"dbt","path":"macros/utils/replace.sql","resource_type":"macro","unique_id":"macro.dbt.default__replace"},"macro.dbt.default__reset_csv_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}","meta":{},"name":"default__reset_csv_table","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/seeds/helpers.sql","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.default__reset_csv_table"},"macro.dbt.default__resolve_model_name":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n","meta":{},"name":"default__resolve_model_name","original_file_path":"dbt_internal_packages/dbt-adapters/macros/python_model/python.sql","package_name":"dbt","path":"macros/python_model/python.sql","resource_type":"macro","unique_id":"macro.dbt.default__resolve_model_name"},"macro.dbt.default__right":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}","meta":{},"name":"default__right","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/right.sql","package_name":"dbt","path":"macros/utils/right.sql","resource_type":"macro","unique_id":"macro.dbt.default__right"},"macro.dbt.default__safe_cast":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}","meta":{},"name":"default__safe_cast","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/safe_cast.sql","package_name":"dbt","path":"macros/utils/safe_cast.sql","resource_type":"macro","unique_id":"macro.dbt.default__safe_cast"},"macro.dbt.default__snapshot_get_time":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}","meta":{},"name":"default__snapshot_get_time","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/timestamps.sql","package_name":"dbt","path":"macros/adapters/timestamps.sql","resource_type":"macro","unique_id":"macro.dbt.default__snapshot_get_time"},"macro.dbt.default__snapshot_hash_arguments":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}","meta":{},"name":"default__snapshot_hash_arguments","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/strategies.sql","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.default__snapshot_hash_arguments"},"macro.dbt.default__snapshot_merge_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n\t{% set source_unique_key = (\"DBT_INTERNAL_DEST.\" ~ columns.dbt_valid_to) | trim %}\n\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\tand ({{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null)\n\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}","meta":{},"name":"default__snapshot_merge_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/snapshot_merge.sql","package_name":"dbt","path":"macros/materializations/snapshots/snapshot_merge.sql","resource_type":"macro","unique_id":"macro.dbt.default__snapshot_merge_sql"},"macro.dbt.default__snapshot_staging_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n    {% if strategy.hard_deletes == 'new_record' %}\n        {% set new_scd_id = snapshot_hash_arguments([columns.dbt_scd_id, snapshot_get_time()]) %}\n    {% endif %}\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n\t\t{% set source_unique_key = columns.dbt_valid_to | trim %}\n\t\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\n\t\t{# The exact equals semantics between NULL values depends on the current behavior flag set. Also, update records if the source field is null #}\n                ( {{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null )\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and ({{ strategy.row_changed }})\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {%- for col in source_sql_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            {{ new_scd_id }} as {{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}","meta":{},"name":"default__snapshot_staging_table","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.default__snapshot_staging_table"},"macro.dbt.default__snapshot_string_as_time":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}","meta":{},"name":"default__snapshot_string_as_time","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/strategies.sql","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.default__snapshot_string_as_time"},"macro.dbt.default__split_part":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}","meta":{},"name":"default__split_part","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/split_part.sql","package_name":"dbt","path":"macros/utils/split_part.sql","resource_type":"macro","unique_id":"macro.dbt.default__split_part"},"macro.dbt.default__string_literal":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}","meta":{},"name":"default__string_literal","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/literal.sql","package_name":"dbt","path":"macros/utils/literal.sql","resource_type":"macro","unique_id":"macro.dbt.default__string_literal"},"macro.dbt.default__support_multiple_grantees_per_dcl_statement":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n","meta":{},"name":"default__support_multiple_grantees_per_dcl_statement","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/apply_grants.sql","package_name":"dbt","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt.default__support_multiple_grantees_per_dcl_statement"},"macro.dbt.default__t_database_name":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__t_database_name() %}\n  {{ return(env_var('DBT_DB_NAME')) }}\n{% endmacro %}","meta":{},"name":"default__t_database_name","original_file_path":"dbt_internal_packages/dbt-adapters/macros/internal/test/names.sql","package_name":"dbt","path":"macros/internal/test/names.sql","resource_type":"macro","unique_id":"macro.dbt.default__t_database_name"},"macro.dbt.default__test_accepted_values":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}","meta":{},"name":"default__test_accepted_values","original_file_path":"dbt_internal_packages/dbt-adapters/macros/generic_test_sql/accepted_values.sql","package_name":"dbt","path":"macros/generic_test_sql/accepted_values.sql","resource_type":"macro","unique_id":"macro.dbt.default__test_accepted_values"},"macro.dbt.default__test_not_null":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}","meta":{},"name":"default__test_not_null","original_file_path":"dbt_internal_packages/dbt-adapters/macros/generic_test_sql/not_null.sql","package_name":"dbt","path":"macros/generic_test_sql/not_null.sql","resource_type":"macro","unique_id":"macro.dbt.default__test_not_null"},"macro.dbt.default__test_relationships":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}","meta":{},"name":"default__test_relationships","original_file_path":"dbt_internal_packages/dbt-adapters/macros/generic_test_sql/relationships.sql","package_name":"dbt","path":"macros/generic_test_sql/relationships.sql","resource_type":"macro","unique_id":"macro.dbt.default__test_relationships"},"macro.dbt.default__test_unique":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}","meta":{},"name":"default__test_unique","original_file_path":"dbt_internal_packages/dbt-adapters/macros/generic_test_sql/unique.sql","package_name":"dbt","path":"macros/generic_test_sql/unique.sql","resource_type":"macro","unique_id":"macro.dbt.default__test_unique"},"macro.dbt.default__truncate_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}","meta":{},"name":"default__truncate_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/relation.sql","package_name":"dbt","path":"macros/adapters/relation.sql","resource_type":"macro","unique_id":"macro.dbt.default__truncate_relation"},"macro.dbt.default__type_bigint":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}","meta":{},"name":"default__type_bigint","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/data_types.sql","package_name":"dbt","path":"macros/utils/data_types.sql","resource_type":"macro","unique_id":"macro.dbt.default__type_bigint"},"macro.dbt.default__type_boolean":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n","meta":{},"name":"default__type_boolean","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/data_types.sql","package_name":"dbt","path":"macros/utils/data_types.sql","resource_type":"macro","unique_id":"macro.dbt.default__type_boolean"},"macro.dbt.default__type_float":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}","meta":{},"name":"default__type_float","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/data_types.sql","package_name":"dbt","path":"macros/utils/data_types.sql","resource_type":"macro","unique_id":"macro.dbt.default__type_float"},"macro.dbt.default__type_int":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n","meta":{},"name":"default__type_int","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/data_types.sql","package_name":"dbt","path":"macros/utils/data_types.sql","resource_type":"macro","unique_id":"macro.dbt.default__type_int"},"macro.dbt.default__type_numeric":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}","meta":{},"name":"default__type_numeric","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/data_types.sql","package_name":"dbt","path":"macros/utils/data_types.sql","resource_type":"macro","unique_id":"macro.dbt.default__type_numeric"},"macro.dbt.default__type_string":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}","meta":{},"name":"default__type_string","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/data_types.sql","package_name":"dbt","path":"macros/utils/data_types.sql","resource_type":"macro","unique_id":"macro.dbt.default__type_string"},"macro.dbt.default__type_timestamp":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}","meta":{},"name":"default__type_timestamp","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/data_types.sql","package_name":"dbt","path":"macros/utils/data_types.sql","resource_type":"macro","unique_id":"macro.dbt.default__type_timestamp"},"macro.dbt.default__validate_fixture_rows":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}","meta":{},"name":"default__validate_fixture_rows","original_file_path":"dbt_internal_packages/dbt-adapters/macros/unit_test_sql/get_fixture_sql.sql","package_name":"dbt","path":"macros/unit_test_sql/get_fixture_sql.sql","resource_type":"macro","unique_id":"macro.dbt.default__validate_fixture_rows"},"macro.dbt.default__validate_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}","meta":{},"name":"default__validate_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/validate_sql.sql","package_name":"dbt","path":"macros/adapters/validate_sql.sql","resource_type":"macro","unique_id":"macro.dbt.default__validate_sql"},"macro.dbt.default_last_day":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n","meta":{},"name":"default_last_day","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/last_day.sql","package_name":"dbt","path":"macros/utils/last_day.sql","resource_type":"macro","unique_id":"macro.dbt.default_last_day"},"macro.dbt.diff_column_data_types":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}","meta":{},"name":"diff_column_data_types","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/column_helpers.sql","package_name":"dbt","path":"macros/materializations/models/incremental/column_helpers.sql","resource_type":"macro","unique_id":"macro.dbt.diff_column_data_types"},"macro.dbt.diff_columns":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}","meta":{},"name":"diff_columns","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/column_helpers.sql","package_name":"dbt","path":"macros/materializations/models/incremental/column_helpers.sql","resource_type":"macro","unique_id":"macro.dbt.diff_columns"},"macro.dbt.drop_materialized_view":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}","meta":{},"name":"drop_materialized_view","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/materialized_view/drop.sql","package_name":"dbt","path":"macros/relations/materialized_view/drop.sql","resource_type":"macro","unique_id":"macro.dbt.drop_materialized_view"},"macro.dbt.drop_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}","meta":{},"name":"drop_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/drop.sql","package_name":"dbt","path":"macros/relations/drop.sql","resource_type":"macro","unique_id":"macro.dbt.drop_relation"},"macro.dbt.drop_relation_if_exists":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}","meta":{},"name":"drop_relation_if_exists","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/drop.sql","package_name":"dbt","path":"macros/relations/drop.sql","resource_type":"macro","unique_id":"macro.dbt.drop_relation_if_exists"},"macro.dbt.drop_schema":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}","meta":{},"name":"drop_schema","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/schema.sql","package_name":"dbt","path":"macros/adapters/schema.sql","resource_type":"macro","unique_id":"macro.dbt.drop_schema"},"macro.dbt.drop_schema_named":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}","meta":{},"name":"drop_schema_named","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/schema.sql","package_name":"dbt","path":"macros/relations/schema.sql","resource_type":"macro","unique_id":"macro.dbt.drop_schema_named"},"macro.dbt.drop_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}","meta":{},"name":"drop_table","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/table/drop.sql","package_name":"dbt","path":"macros/relations/table/drop.sql","resource_type":"macro","unique_id":"macro.dbt.drop_table"},"macro.dbt.drop_view":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}","meta":{},"name":"drop_view","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/view/drop.sql","package_name":"dbt","path":"macros/relations/view/drop.sql","resource_type":"macro","unique_id":"macro.dbt.drop_view"},"macro.dbt.equals":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro equals(expr1, expr2) %}\n    {{ return(adapter.dispatch('equals', 'dbt') (expr1, expr2)) }}\n{%- endmacro %}","meta":{},"name":"equals","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/equals.sql","package_name":"dbt","path":"macros/utils/equals.sql","resource_type":"macro","unique_id":"macro.dbt.equals"},"macro.dbt.escape_single_quotes":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}","meta":{},"name":"escape_single_quotes","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/escape_single_quotes.sql","package_name":"dbt","path":"macros/utils/escape_single_quotes.sql","resource_type":"macro","unique_id":"macro.dbt.escape_single_quotes"},"macro.dbt.except":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}","meta":{},"name":"except","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/except.sql","package_name":"dbt","path":"macros/utils/except.sql","resource_type":"macro","unique_id":"macro.dbt.except"},"macro.dbt.format_columns":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}","meta":{},"name":"format_columns","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/column/columns_spec_ddl.sql","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","resource_type":"macro","unique_id":"macro.dbt.format_columns"},"macro.dbt.format_row":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n","meta":{},"name":"format_row","original_file_path":"dbt_internal_packages/dbt-adapters/macros/unit_test_sql/get_fixture_sql.sql","package_name":"dbt","path":"macros/unit_test_sql/get_fixture_sql.sql","resource_type":"macro","unique_id":"macro.dbt.format_row"},"macro.dbt.generate_alias_name":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}","meta":{},"name":"generate_alias_name","original_file_path":"dbt_internal_packages/dbt-adapters/macros/get_custom_name/get_custom_alias.sql","package_name":"dbt","path":"macros/get_custom_name/get_custom_alias.sql","resource_type":"macro","unique_id":"macro.dbt.generate_alias_name"},"macro.dbt.generate_database_name":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}","meta":{},"name":"generate_database_name","original_file_path":"dbt_internal_packages/dbt-adapters/macros/get_custom_name/get_custom_database.sql","package_name":"dbt","path":"macros/get_custom_name/get_custom_database.sql","resource_type":"macro","unique_id":"macro.dbt.generate_database_name"},"macro.dbt.generate_schema_name":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}","meta":{},"name":"generate_schema_name","original_file_path":"dbt_internal_packages/dbt-adapters/macros/get_custom_name/get_custom_schema.sql","package_name":"dbt","path":"macros/get_custom_name/get_custom_schema.sql","resource_type":"macro","unique_id":"macro.dbt.generate_schema_name"},"macro.dbt.generate_schema_name_for_env":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}","meta":{},"name":"generate_schema_name_for_env","original_file_path":"dbt_internal_packages/dbt-adapters/macros/get_custom_name/get_custom_schema.sql","package_name":"dbt","path":"macros/get_custom_name/get_custom_schema.sql","resource_type":"macro","unique_id":"macro.dbt.generate_schema_name_for_env"},"macro.dbt.generate_series":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}","meta":{},"name":"generate_series","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/generate_series.sql","package_name":"dbt","path":"macros/utils/generate_series.sql","resource_type":"macro","unique_id":"macro.dbt.generate_series"},"macro.dbt.get_alter_materialized_view_as_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}","meta":{},"name":"get_alter_materialized_view_as_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/materialized_view/alter.sql","package_name":"dbt","path":"macros/relations/materialized_view/alter.sql","resource_type":"macro","unique_id":"macro.dbt.get_alter_materialized_view_as_sql"},"macro.dbt.get_assert_columns_equivalent":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n","meta":{},"name":"get_assert_columns_equivalent","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/column/columns_spec_ddl.sql","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","resource_type":"macro","unique_id":"macro.dbt.get_assert_columns_equivalent"},"macro.dbt.get_batch_size":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}","meta":{},"name":"get_batch_size","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/seeds/helpers.sql","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.get_batch_size"},"macro.dbt.get_binding_char":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}","meta":{},"name":"get_binding_char","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/seeds/helpers.sql","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.get_binding_char"},"macro.dbt.get_catalog":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}","meta":{},"name":"get_catalog","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/metadata.sql","package_name":"dbt","path":"macros/adapters/metadata.sql","resource_type":"macro","unique_id":"macro.dbt.get_catalog"},"macro.dbt.get_catalog_for_single_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}","meta":{},"name":"get_catalog_for_single_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/metadata.sql","package_name":"dbt","path":"macros/adapters/metadata.sql","resource_type":"macro","unique_id":"macro.dbt.get_catalog_for_single_relation"},"macro.dbt.get_catalog_relations":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}","meta":{},"name":"get_catalog_relations","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/metadata.sql","package_name":"dbt","path":"macros/adapters/metadata.sql","resource_type":"macro","unique_id":"macro.dbt.get_catalog_relations"},"macro.dbt.get_column_schema_from_query":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}","meta":{},"name":"get_column_schema_from_query","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/columns.sql","package_name":"dbt","path":"macros/adapters/columns.sql","resource_type":"macro","unique_id":"macro.dbt.get_column_schema_from_query"},"macro.dbt.get_columns_in_query":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}","meta":{},"name":"get_columns_in_query","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/columns.sql","package_name":"dbt","path":"macros/adapters/columns.sql","resource_type":"macro","unique_id":"macro.dbt.get_columns_in_query"},"macro.dbt.get_columns_in_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}","meta":{},"name":"get_columns_in_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/columns.sql","package_name":"dbt","path":"macros/adapters/columns.sql","resource_type":"macro","unique_id":"macro.dbt.get_columns_in_relation"},"macro.dbt.get_create_backup_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n","meta":{},"name":"get_create_backup_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/create_backup.sql","package_name":"dbt","path":"macros/relations/create_backup.sql","resource_type":"macro","unique_id":"macro.dbt.get_create_backup_sql"},"macro.dbt.get_create_index_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}","meta":{},"name":"get_create_index_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/indexes.sql","package_name":"dbt","path":"macros/adapters/indexes.sql","resource_type":"macro","unique_id":"macro.dbt.get_create_index_sql"},"macro.dbt.get_create_intermediate_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n","meta":{},"name":"get_create_intermediate_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/create_intermediate.sql","package_name":"dbt","path":"macros/relations/create_intermediate.sql","resource_type":"macro","unique_id":"macro.dbt.get_create_intermediate_sql"},"macro.dbt.get_create_materialized_view_as_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}","meta":{},"name":"get_create_materialized_view_as_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/materialized_view/create.sql","package_name":"dbt","path":"macros/relations/materialized_view/create.sql","resource_type":"macro","unique_id":"macro.dbt.get_create_materialized_view_as_sql"},"macro.dbt.get_create_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n","meta":{},"name":"get_create_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/create.sql","package_name":"dbt","path":"macros/relations/create.sql","resource_type":"macro","unique_id":"macro.dbt.get_create_sql"},"macro.dbt.get_create_table_as_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}","meta":{},"name":"get_create_table_as_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/table/create.sql","package_name":"dbt","path":"macros/relations/table/create.sql","resource_type":"macro","unique_id":"macro.dbt.get_create_table_as_sql"},"macro.dbt.get_create_view_as_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}","meta":{},"name":"get_create_view_as_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/view/create.sql","package_name":"dbt","path":"macros/relations/view/create.sql","resource_type":"macro","unique_id":"macro.dbt.get_create_view_as_sql"},"macro.dbt.get_csv_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}","meta":{},"name":"get_csv_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/seeds/helpers.sql","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.get_csv_sql"},"macro.dbt.get_dbt_valid_to_current":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}","meta":{},"name":"get_dbt_valid_to_current","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.get_dbt_valid_to_current"},"macro.dbt.get_dcl_statement_list":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}","meta":{},"name":"get_dcl_statement_list","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/apply_grants.sql","package_name":"dbt","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt.get_dcl_statement_list"},"macro.dbt.get_delete_insert_merge_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}","meta":{},"name":"get_delete_insert_merge_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/merge.sql","package_name":"dbt","path":"macros/materializations/models/incremental/merge.sql","resource_type":"macro","unique_id":"macro.dbt.get_delete_insert_merge_sql"},"macro.dbt.get_drop_backup_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n","meta":{},"name":"get_drop_backup_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/drop_backup.sql","package_name":"dbt","path":"macros/relations/drop_backup.sql","resource_type":"macro","unique_id":"macro.dbt.get_drop_backup_sql"},"macro.dbt.get_drop_index_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}","meta":{},"name":"get_drop_index_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/indexes.sql","package_name":"dbt","path":"macros/adapters/indexes.sql","resource_type":"macro","unique_id":"macro.dbt.get_drop_index_sql"},"macro.dbt.get_drop_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n","meta":{},"name":"get_drop_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/drop.sql","package_name":"dbt","path":"macros/relations/drop.sql","resource_type":"macro","unique_id":"macro.dbt.get_drop_sql"},"macro.dbt.get_empty_schema_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}","meta":{},"name":"get_empty_schema_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/columns.sql","package_name":"dbt","path":"macros/adapters/columns.sql","resource_type":"macro","unique_id":"macro.dbt.get_empty_schema_sql"},"macro.dbt.get_empty_subquery_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}","meta":{},"name":"get_empty_subquery_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/columns.sql","package_name":"dbt","path":"macros/adapters/columns.sql","resource_type":"macro","unique_id":"macro.dbt.get_empty_subquery_sql"},"macro.dbt.get_expected_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}","meta":{},"name":"get_expected_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/unit_test_sql/get_fixture_sql.sql","package_name":"dbt","path":"macros/unit_test_sql/get_fixture_sql.sql","resource_type":"macro","unique_id":"macro.dbt.get_expected_sql"},"macro.dbt.get_fixture_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}","meta":{},"name":"get_fixture_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/unit_test_sql/get_fixture_sql.sql","package_name":"dbt","path":"macros/unit_test_sql/get_fixture_sql.sql","resource_type":"macro","unique_id":"macro.dbt.get_fixture_sql"},"macro.dbt.get_grant_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}","meta":{},"name":"get_grant_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/apply_grants.sql","package_name":"dbt","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt.get_grant_sql"},"macro.dbt.get_incremental_append_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}","meta":{},"name":"get_incremental_append_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/strategies.sql","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.get_incremental_append_sql"},"macro.dbt.get_incremental_default_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}","meta":{},"name":"get_incremental_default_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/strategies.sql","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.get_incremental_default_sql"},"macro.dbt.get_incremental_delete_insert_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}","meta":{},"name":"get_incremental_delete_insert_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/strategies.sql","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.get_incremental_delete_insert_sql"},"macro.dbt.get_incremental_insert_overwrite_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}","meta":{},"name":"get_incremental_insert_overwrite_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/strategies.sql","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.get_incremental_insert_overwrite_sql"},"macro.dbt.get_incremental_merge_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}","meta":{},"name":"get_incremental_merge_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/strategies.sql","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.get_incremental_merge_sql"},"macro.dbt.get_incremental_microbatch_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}","meta":{},"name":"get_incremental_microbatch_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/strategies.sql","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.get_incremental_microbatch_sql"},"macro.dbt.get_insert_into_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}","meta":{},"name":"get_insert_into_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/strategies.sql","package_name":"dbt","path":"macros/materializations/models/incremental/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.get_insert_into_sql"},"macro.dbt.get_insert_overwrite_merge_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}","meta":{},"name":"get_insert_overwrite_merge_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/merge.sql","package_name":"dbt","path":"macros/materializations/models/incremental/merge.sql","resource_type":"macro","unique_id":"macro.dbt.get_insert_overwrite_merge_sql"},"macro.dbt.get_intervals_between":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}","meta":{},"name":"get_intervals_between","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/date_spine.sql","package_name":"dbt","path":"macros/utils/date_spine.sql","resource_type":"macro","unique_id":"macro.dbt.get_intervals_between"},"macro.dbt.get_limit_subquery_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n","meta":{},"name":"get_limit_subquery_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/show.sql","package_name":"dbt","path":"macros/adapters/show.sql","resource_type":"macro","unique_id":"macro.dbt.get_limit_subquery_sql"},"macro.dbt.get_materialized_view_configuration_changes":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}","meta":{},"name":"get_materialized_view_configuration_changes","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/materialized_view/alter.sql","package_name":"dbt","path":"macros/relations/materialized_view/alter.sql","resource_type":"macro","unique_id":"macro.dbt.get_materialized_view_configuration_changes"},"macro.dbt.get_merge_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}","meta":{},"name":"get_merge_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/merge.sql","package_name":"dbt","path":"macros/materializations/models/incremental/merge.sql","resource_type":"macro","unique_id":"macro.dbt.get_merge_sql"},"macro.dbt.get_merge_update_columns":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}","meta":{},"name":"get_merge_update_columns","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/column_helpers.sql","package_name":"dbt","path":"macros/materializations/models/incremental/column_helpers.sql","resource_type":"macro","unique_id":"macro.dbt.get_merge_update_columns"},"macro.dbt.get_or_create_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}","meta":{},"name":"get_or_create_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/relation.sql","package_name":"dbt","path":"macros/adapters/relation.sql","resource_type":"macro","unique_id":"macro.dbt.get_or_create_relation"},"macro.dbt.get_powers_of_two":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}","meta":{},"name":"get_powers_of_two","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/generate_series.sql","package_name":"dbt","path":"macros/utils/generate_series.sql","resource_type":"macro","unique_id":"macro.dbt.get_powers_of_two"},"macro.dbt.get_quoted_csv":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}","meta":{},"name":"get_quoted_csv","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/column_helpers.sql","package_name":"dbt","path":"macros/materializations/models/incremental/column_helpers.sql","resource_type":"macro","unique_id":"macro.dbt.get_quoted_csv"},"macro.dbt.get_relation_last_modified":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}","meta":{},"name":"get_relation_last_modified","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/metadata.sql","package_name":"dbt","path":"macros/adapters/metadata.sql","resource_type":"macro","unique_id":"macro.dbt.get_relation_last_modified"},"macro.dbt.get_relations":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}","meta":{},"name":"get_relations","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/metadata.sql","package_name":"dbt","path":"macros/adapters/metadata.sql","resource_type":"macro","unique_id":"macro.dbt.get_relations"},"macro.dbt.get_relations_by_pattern_internal":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_relations_by_pattern_internal(schema_pattern, table_pattern, exclude='', database=target.database, quote_table=False, excluded_schemas=[]) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern_internal')(schema_pattern, table_pattern, exclude, database, quote_table, excluded_schemas)) }}\n{% endmacro %}","meta":{},"name":"get_relations_by_pattern_internal","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/get_relations_by_pattern.sql","package_name":"dbt","path":"macros/relations/get_relations_by_pattern.sql","resource_type":"macro","unique_id":"macro.dbt.get_relations_by_pattern_internal"},"macro.dbt.get_rename_intermediate_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n","meta":{},"name":"get_rename_intermediate_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/rename_intermediate.sql","package_name":"dbt","path":"macros/relations/rename_intermediate.sql","resource_type":"macro","unique_id":"macro.dbt.get_rename_intermediate_sql"},"macro.dbt.get_rename_materialized_view_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}","meta":{},"name":"get_rename_materialized_view_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/materialized_view/rename.sql","package_name":"dbt","path":"macros/relations/materialized_view/rename.sql","resource_type":"macro","unique_id":"macro.dbt.get_rename_materialized_view_sql"},"macro.dbt.get_rename_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n","meta":{},"name":"get_rename_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/rename.sql","package_name":"dbt","path":"macros/relations/rename.sql","resource_type":"macro","unique_id":"macro.dbt.get_rename_sql"},"macro.dbt.get_rename_table_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}","meta":{},"name":"get_rename_table_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/table/rename.sql","package_name":"dbt","path":"macros/relations/table/rename.sql","resource_type":"macro","unique_id":"macro.dbt.get_rename_table_sql"},"macro.dbt.get_rename_view_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}","meta":{},"name":"get_rename_view_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/view/rename.sql","package_name":"dbt","path":"macros/relations/view/rename.sql","resource_type":"macro","unique_id":"macro.dbt.get_rename_view_sql"},"macro.dbt.get_replace_materialized_view_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}","meta":{},"name":"get_replace_materialized_view_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/materialized_view/replace.sql","package_name":"dbt","path":"macros/relations/materialized_view/replace.sql","resource_type":"macro","unique_id":"macro.dbt.get_replace_materialized_view_sql"},"macro.dbt.get_replace_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}","meta":{},"name":"get_replace_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/replace.sql","package_name":"dbt","path":"macros/relations/replace.sql","resource_type":"macro","unique_id":"macro.dbt.get_replace_sql"},"macro.dbt.get_replace_table_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}","meta":{},"name":"get_replace_table_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/table/replace.sql","package_name":"dbt","path":"macros/relations/table/replace.sql","resource_type":"macro","unique_id":"macro.dbt.get_replace_table_sql"},"macro.dbt.get_replace_view_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}","meta":{},"name":"get_replace_view_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/view/replace.sql","package_name":"dbt","path":"macros/relations/view/replace.sql","resource_type":"macro","unique_id":"macro.dbt.get_replace_view_sql"},"macro.dbt.get_revoke_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}","meta":{},"name":"get_revoke_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/apply_grants.sql","package_name":"dbt","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt.get_revoke_sql"},"macro.dbt.get_seed_column_quoted_csv":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}","meta":{},"name":"get_seed_column_quoted_csv","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/seeds/helpers.sql","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.get_seed_column_quoted_csv"},"macro.dbt.get_select_subquery":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}","meta":{},"name":"get_select_subquery","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/table/create.sql","package_name":"dbt","path":"macros/relations/table/create.sql","resource_type":"macro","unique_id":"macro.dbt.get_select_subquery"},"macro.dbt.get_show_grant_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}","meta":{},"name":"get_show_grant_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/apply_grants.sql","package_name":"dbt","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt.get_show_grant_sql"},"macro.dbt.get_show_indexes_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}","meta":{},"name":"get_show_indexes_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/indexes.sql","package_name":"dbt","path":"macros/adapters/indexes.sql","resource_type":"macro","unique_id":"macro.dbt.get_show_indexes_sql"},"macro.dbt.get_show_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}","meta":{},"name":"get_show_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/show.sql","package_name":"dbt","path":"macros/adapters/show.sql","resource_type":"macro","unique_id":"macro.dbt.get_show_sql"},"macro.dbt.get_snapshot_get_time_data_type":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}","meta":{},"name":"get_snapshot_get_time_data_type","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/timestamps.sql","package_name":"dbt","path":"macros/adapters/timestamps.sql","resource_type":"macro","unique_id":"macro.dbt.get_snapshot_get_time_data_type"},"macro.dbt.get_snapshot_table_column_names":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}","meta":{},"name":"get_snapshot_table_column_names","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.get_snapshot_table_column_names"},"macro.dbt.get_table_columns_and_constraints":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n","meta":{},"name":"get_table_columns_and_constraints","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/column/columns_spec_ddl.sql","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","resource_type":"macro","unique_id":"macro.dbt.get_table_columns_and_constraints"},"macro.dbt.get_table_types_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql')()) }}\n{%- endmacro -%}\n\n","meta":{},"name":"get_table_types_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/get_table_types_sql.sql","package_name":"dbt","path":"macros/relations/get_table_types_sql.sql","resource_type":"macro","unique_id":"macro.dbt.get_table_types_sql"},"macro.dbt.get_tables_by_pattern_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}","meta":{},"name":"get_tables_by_pattern_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/get_relations_by_pattern_sql.sql","package_name":"dbt","path":"macros/relations/get_relations_by_pattern_sql.sql","resource_type":"macro","unique_id":"macro.dbt.get_tables_by_pattern_sql"},"macro.dbt.get_test_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}","meta":{},"name":"get_test_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/tests/helpers.sql","package_name":"dbt","path":"macros/materializations/tests/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.get_test_sql"},"macro.dbt.get_true_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}","meta":{},"name":"get_true_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.get_true_sql"},"macro.dbt.get_unit_test_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}","meta":{},"name":"get_unit_test_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/tests/helpers.sql","package_name":"dbt","path":"macros/materializations/tests/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.get_unit_test_sql"},"macro.dbt.get_updated_at_column_data_type":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}","meta":{},"name":"get_updated_at_column_data_type","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.get_updated_at_column_data_type"},"macro.dbt.get_where_subquery":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}","meta":{},"name":"get_where_subquery","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/tests/where_subquery.sql","package_name":"dbt","path":"macros/materializations/tests/where_subquery.sql","resource_type":"macro","unique_id":"macro.dbt.get_where_subquery"},"macro.dbt.handle_existing_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}","meta":{},"name":"handle_existing_table","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/view/replace.sql","package_name":"dbt","path":"macros/relations/view/replace.sql","resource_type":"macro","unique_id":"macro.dbt.handle_existing_table"},"macro.dbt.hash":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}","meta":{},"name":"hash","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/hash.sql","package_name":"dbt","path":"macros/utils/hash.sql","resource_type":"macro","unique_id":"macro.dbt.hash"},"macro.dbt.in_transaction":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}","meta":{},"name":"in_transaction","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/hooks.sql","package_name":"dbt","path":"macros/materializations/hooks.sql","resource_type":"macro","unique_id":"macro.dbt.in_transaction"},"macro.dbt.incremental_validate_on_schema_change":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}","meta":{},"name":"incremental_validate_on_schema_change","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/on_schema_change.sql","package_name":"dbt","path":"macros/materializations/models/incremental/on_schema_change.sql","resource_type":"macro","unique_id":"macro.dbt.incremental_validate_on_schema_change"},"macro.dbt.information_schema_name":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}","meta":{},"name":"information_schema_name","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/metadata.sql","package_name":"dbt","path":"macros/adapters/metadata.sql","resource_type":"macro","unique_id":"macro.dbt.information_schema_name"},"macro.dbt.intersect":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}","meta":{},"name":"intersect","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/intersect.sql","package_name":"dbt","path":"macros/utils/intersect.sql","resource_type":"macro","unique_id":"macro.dbt.intersect"},"macro.dbt.is_incremental":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}","meta":{},"name":"is_incremental","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/is_incremental.sql","package_name":"dbt","path":"macros/materializations/models/incremental/is_incremental.sql","resource_type":"macro","unique_id":"macro.dbt.is_incremental"},"macro.dbt.last_day":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}","meta":{},"name":"last_day","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/last_day.sql","package_name":"dbt","path":"macros/utils/last_day.sql","resource_type":"macro","unique_id":"macro.dbt.last_day"},"macro.dbt.length":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}","meta":{},"name":"length","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/length.sql","package_name":"dbt","path":"macros/utils/length.sql","resource_type":"macro","unique_id":"macro.dbt.length"},"macro.dbt.list_relations_without_caching":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}","meta":{},"name":"list_relations_without_caching","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/metadata.sql","package_name":"dbt","path":"macros/adapters/metadata.sql","resource_type":"macro","unique_id":"macro.dbt.list_relations_without_caching"},"macro.dbt.list_schemas":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}","meta":{},"name":"list_schemas","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/metadata.sql","package_name":"dbt","path":"macros/adapters/metadata.sql","resource_type":"macro","unique_id":"macro.dbt.list_schemas"},"macro.dbt.listagg":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}","meta":{},"name":"listagg","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/listagg.sql","package_name":"dbt","path":"macros/utils/listagg.sql","resource_type":"macro","unique_id":"macro.dbt.listagg"},"macro.dbt.load_cached_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}","meta":{},"name":"load_cached_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/relation.sql","package_name":"dbt","path":"macros/adapters/relation.sql","resource_type":"macro","unique_id":"macro.dbt.load_cached_relation"},"macro.dbt.load_csv_rows":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}","meta":{},"name":"load_csv_rows","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/seeds/helpers.sql","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.load_csv_rows"},"macro.dbt.load_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}","meta":{},"name":"load_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/relation.sql","package_name":"dbt","path":"macros/adapters/relation.sql","resource_type":"macro","unique_id":"macro.dbt.load_relation"},"macro.dbt.make_backup_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}","meta":{},"name":"make_backup_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/relation.sql","package_name":"dbt","path":"macros/adapters/relation.sql","resource_type":"macro","unique_id":"macro.dbt.make_backup_relation"},"macro.dbt.make_hook_config":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}","meta":{},"name":"make_hook_config","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/hooks.sql","package_name":"dbt","path":"macros/materializations/hooks.sql","resource_type":"macro","unique_id":"macro.dbt.make_hook_config"},"macro.dbt.make_intermediate_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}","meta":{},"name":"make_intermediate_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/relation.sql","package_name":"dbt","path":"macros/adapters/relation.sql","resource_type":"macro","unique_id":"macro.dbt.make_intermediate_relation"},"macro.dbt.make_temp_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {#-- This ensures microbatch batches get unique temp relations to avoid clobbering --#}\n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}","meta":{},"name":"make_temp_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/relation.sql","package_name":"dbt","path":"macros/adapters/relation.sql","resource_type":"macro","unique_id":"macro.dbt.make_temp_relation"},"macro.dbt.materialization_clone_default":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}","meta":{},"name":"materialization_clone_default","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/clone/clone.sql","package_name":"dbt","path":"macros/materializations/models/clone/clone.sql","resource_type":"macro","unique_id":"macro.dbt.materialization_clone_default"},"macro.dbt.materialization_incremental_default":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n      {% set relation_for_indexes = target_relation %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set relation_for_indexes = intermediate_relation %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set relation_for_indexes = temp_relation %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(relation_for_indexes) %}\n  {% endif %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}","meta":{},"name":"materialization_incremental_default","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/incremental.sql","package_name":"dbt","path":"macros/materializations/models/incremental/incremental.sql","resource_type":"macro","unique_id":"macro.dbt.materialization_incremental_default"},"macro.dbt.materialization_materialized_view_default":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}","meta":{},"name":"materialization_materialized_view_default","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/materialized_view.sql","package_name":"dbt","path":"macros/materializations/models/materialized_view.sql","resource_type":"macro","unique_id":"macro.dbt.materialization_materialized_view_default"},"macro.dbt.materialization_seed_default":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}","meta":{},"name":"materialization_seed_default","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/seeds/seed.sql","package_name":"dbt","path":"macros/materializations/seeds/seed.sql","resource_type":"macro","unique_id":"macro.dbt.materialization_seed_default"},"macro.dbt.materialization_snapshot_default":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n\n  \n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}","meta":{},"name":"materialization_snapshot_default","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/snapshot.sql","package_name":"dbt","path":"macros/materializations/snapshots/snapshot.sql","resource_type":"macro","unique_id":"macro.dbt.materialization_snapshot_default"},"macro.dbt.materialization_table_default":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  {% do create_indexes(intermediate_relation) %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}","meta":{},"name":"materialization_table_default","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/table.sql","package_name":"dbt","path":"macros/materializations/models/table.sql","resource_type":"macro","unique_id":"macro.dbt.materialization_table_default"},"macro.dbt.materialization_test_default":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- materialization test, default -%}\n\n  {% set relations = [] %}\n  {% set limit = config.get('limit') %}\n\n  {% set sql_with_limit %}\n    {{ get_limit_subquery_sql(sql, limit) }}\n  {% endset %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql_with_limit) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {# Since the test failures have already been saved to the database, reuse that result rather than querying again #}\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql_with_limit %}\n\n  {% endif %}\n\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {# The limit has already been included above, and we do not want to duplicate it again. We also want to be safe for macro overrides treating `limit` as a required parameter. #}\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit=none)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}","meta":{},"name":"materialization_test_default","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/tests/test.sql","package_name":"dbt","path":"macros/materializations/tests/test.sql","resource_type":"macro","unique_id":"macro.dbt.materialization_test_default"},"macro.dbt.materialization_unit_default":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}","meta":{},"name":"materialization_unit_default","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/tests/unit.sql","package_name":"dbt","path":"macros/materializations/tests/unit.sql","resource_type":"macro","unique_id":"macro.dbt.materialization_unit_default"},"macro.dbt.materialization_view_default":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}","meta":{},"name":"materialization_view_default","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/view.sql","package_name":"dbt","path":"macros/materializations/models/view.sql","resource_type":"macro","unique_id":"macro.dbt.materialization_view_default"},"macro.dbt.materialized_view_execute_build_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}","meta":{},"name":"materialized_view_execute_build_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/materialized_view.sql","package_name":"dbt","path":"macros/materializations/models/materialized_view.sql","resource_type":"macro","unique_id":"macro.dbt.materialized_view_execute_build_sql"},"macro.dbt.materialized_view_execute_no_op":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}","meta":{},"name":"materialized_view_execute_no_op","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/materialized_view.sql","package_name":"dbt","path":"macros/materializations/models/materialized_view.sql","resource_type":"macro","unique_id":"macro.dbt.materialized_view_execute_no_op"},"macro.dbt.materialized_view_get_build_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}","meta":{},"name":"materialized_view_get_build_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/materialized_view.sql","package_name":"dbt","path":"macros/materializations/models/materialized_view.sql","resource_type":"macro","unique_id":"macro.dbt.materialized_view_get_build_sql"},"macro.dbt.materialized_view_setup":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}","meta":{},"name":"materialized_view_setup","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/materialized_view.sql","package_name":"dbt","path":"macros/materializations/models/materialized_view.sql","resource_type":"macro","unique_id":"macro.dbt.materialized_view_setup"},"macro.dbt.materialized_view_teardown":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}","meta":{},"name":"materialized_view_teardown","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/materialized_view.sql","package_name":"dbt","path":"macros/materializations/models/materialized_view.sql","resource_type":"macro","unique_id":"macro.dbt.materialized_view_teardown"},"macro.dbt.noop_statement":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}","meta":{},"name":"noop_statement","original_file_path":"dbt_internal_packages/dbt-adapters/macros/etc/statement.sql","package_name":"dbt","path":"macros/etc/statement.sql","resource_type":"macro","unique_id":"macro.dbt.noop_statement"},"macro.dbt.partition_range":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}","meta":{},"name":"partition_range","original_file_path":"dbt_internal_packages/dbt-adapters/macros/etc/datetime.sql","package_name":"dbt","path":"macros/etc/datetime.sql","resource_type":"macro","unique_id":"macro.dbt.partition_range"},"macro.dbt.persist_docs":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}","meta":{},"name":"persist_docs","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/persist_docs.sql","package_name":"dbt","path":"macros/adapters/persist_docs.sql","resource_type":"macro","unique_id":"macro.dbt.persist_docs"},"macro.dbt.position":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}","meta":{},"name":"position","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/position.sql","package_name":"dbt","path":"macros/utils/position.sql","resource_type":"macro","unique_id":"macro.dbt.position"},"macro.dbt.post_snapshot":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}","meta":{},"name":"post_snapshot","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.post_snapshot"},"macro.dbt.postgres__get_table_types_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}","meta":{},"name":"postgres__get_table_types_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/get_table_types_sql.sql","package_name":"dbt","path":"macros/relations/get_table_types_sql.sql","resource_type":"macro","unique_id":"macro.dbt.postgres__get_table_types_sql"},"macro.dbt.process_schema_changes":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}","meta":{},"name":"process_schema_changes","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/on_schema_change.sql","package_name":"dbt","path":"macros/materializations/models/incremental/on_schema_change.sql","resource_type":"macro","unique_id":"macro.dbt.process_schema_changes"},"macro.dbt.py_current_timestring":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}","meta":{},"name":"py_current_timestring","original_file_path":"dbt_internal_packages/dbt-adapters/macros/etc/datetime.sql","package_name":"dbt","path":"macros/etc/datetime.sql","resource_type":"macro","unique_id":"macro.dbt.py_current_timestring"},"macro.dbt.py_script_comment":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%macro py_script_comment()%}\n{%endmacro%}","meta":{},"name":"py_script_comment","original_file_path":"dbt_internal_packages/dbt-adapters/macros/python_model/python.sql","package_name":"dbt","path":"macros/python_model/python.sql","resource_type":"macro","unique_id":"macro.dbt.py_script_comment"},"macro.dbt.py_script_postfix":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> string:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}","meta":{},"name":"py_script_postfix","original_file_path":"dbt_internal_packages/dbt-adapters/macros/python_model/python.sql","package_name":"dbt","path":"macros/python_model/python.sql","resource_type":"macro","unique_id":"macro.dbt.py_script_postfix"},"macro.dbt.redshift__get_tables_by_pattern_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro redshift__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% set sql %}\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ adapter.dispatch('get_table_types_sql')() }}\n        from \"{{ database }}\".\"information_schema\".\"tables\"\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n        union all\n        select distinct\n            schemaname as {{ adapter.quote('table_schema') }},\n            tablename as {{ adapter.quote('table_name') }},\n            'external' as {{ adapter.quote('table_type') }}\n        from svv_external_tables\n        where redshift_database_name = '{{ database }}'\n        and schemaname ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n    {% endset %}\n\n    {{ return(sql) }}\n{% endmacro %}","meta":{},"name":"redshift__get_tables_by_pattern_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/get_relations_by_pattern_sql.sql","package_name":"dbt","path":"macros/relations/get_relations_by_pattern_sql.sql","resource_type":"macro","unique_id":"macro.dbt.redshift__get_tables_by_pattern_sql"},"macro.dbt.redshift__t_database_name":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro redshift__t_database_name() %}\n  {{ return(env_var('REDSHIFT_DATABASE')) }}\n{% endmacro %}","meta":{},"name":"redshift__t_database_name","original_file_path":"dbt_internal_packages/dbt-adapters/macros/internal/test/names.sql","package_name":"dbt","path":"macros/internal/test/names.sql","resource_type":"macro","unique_id":"macro.dbt.redshift__t_database_name"},"macro.dbt.refresh_materialized_view":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}","meta":{},"name":"refresh_materialized_view","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/materialized_view/refresh.sql","package_name":"dbt","path":"macros/relations/materialized_view/refresh.sql","resource_type":"macro","unique_id":"macro.dbt.refresh_materialized_view"},"macro.dbt.rename_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}","meta":{},"name":"rename_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/rename.sql","package_name":"dbt","path":"macros/relations/rename.sql","resource_type":"macro","unique_id":"macro.dbt.rename_relation"},"macro.dbt.replace":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}","meta":{},"name":"replace","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/replace.sql","package_name":"dbt","path":"macros/utils/replace.sql","resource_type":"macro","unique_id":"macro.dbt.replace"},"macro.dbt.reset_csv_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}","meta":{},"name":"reset_csv_table","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/seeds/helpers.sql","package_name":"dbt","path":"macros/materializations/seeds/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.reset_csv_table"},"macro.dbt.resolve_model_name":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}","meta":{},"name":"resolve_model_name","original_file_path":"dbt_internal_packages/dbt-adapters/macros/python_model/python.sql","package_name":"dbt","path":"macros/python_model/python.sql","resource_type":"macro","unique_id":"macro.dbt.resolve_model_name"},"macro.dbt.right":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}","meta":{},"name":"right","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/right.sql","package_name":"dbt","path":"macros/utils/right.sql","resource_type":"macro","unique_id":"macro.dbt.right"},"macro.dbt.run_hooks":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}","meta":{},"name":"run_hooks","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/hooks.sql","package_name":"dbt","path":"macros/materializations/hooks.sql","resource_type":"macro","unique_id":"macro.dbt.run_hooks"},"macro.dbt.run_query":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}","meta":{},"name":"run_query","original_file_path":"dbt_internal_packages/dbt-adapters/macros/etc/statement.sql","package_name":"dbt","path":"macros/etc/statement.sql","resource_type":"macro","unique_id":"macro.dbt.run_query"},"macro.dbt.safe_cast":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}","meta":{},"name":"safe_cast","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/safe_cast.sql","package_name":"dbt","path":"macros/utils/safe_cast.sql","resource_type":"macro","unique_id":"macro.dbt.safe_cast"},"macro.dbt.set_sql_header":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}","meta":{},"name":"set_sql_header","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/configs.sql","package_name":"dbt","path":"macros/materializations/configs.sql","resource_type":"macro","unique_id":"macro.dbt.set_sql_header"},"macro.dbt.should_full_refresh":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}","meta":{},"name":"should_full_refresh","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/configs.sql","package_name":"dbt","path":"macros/materializations/configs.sql","resource_type":"macro","unique_id":"macro.dbt.should_full_refresh"},"macro.dbt.should_revoke":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}","meta":{},"name":"should_revoke","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/apply_grants.sql","package_name":"dbt","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt.should_revoke"},"macro.dbt.should_store_failures":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}","meta":{},"name":"should_store_failures","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/configs.sql","package_name":"dbt","path":"macros/materializations/configs.sql","resource_type":"macro","unique_id":"macro.dbt.should_store_failures"},"macro.dbt.snapshot_check_all_get_existing_columns":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}","meta":{},"name":"snapshot_check_all_get_existing_columns","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/strategies.sql","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.snapshot_check_all_get_existing_columns"},"macro.dbt.snapshot_check_strategy":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}","meta":{},"name":"snapshot_check_strategy","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/strategies.sql","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.snapshot_check_strategy"},"macro.dbt.snapshot_get_time":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n","meta":{},"name":"snapshot_get_time","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/timestamps.sql","package_name":"dbt","path":"macros/adapters/timestamps.sql","resource_type":"macro","unique_id":"macro.dbt.snapshot_get_time"},"macro.dbt.snapshot_hash_arguments":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}","meta":{},"name":"snapshot_hash_arguments","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/strategies.sql","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.snapshot_hash_arguments"},"macro.dbt.snapshot_merge_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}","meta":{},"name":"snapshot_merge_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/snapshot_merge.sql","package_name":"dbt","path":"macros/materializations/snapshots/snapshot_merge.sql","resource_type":"macro","unique_id":"macro.dbt.snapshot_merge_sql"},"macro.dbt.snapshot_staging_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}","meta":{},"name":"snapshot_staging_table","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.snapshot_staging_table"},"macro.dbt.snapshot_string_as_time":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}","meta":{},"name":"snapshot_string_as_time","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/strategies.sql","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.snapshot_string_as_time"},"macro.dbt.snapshot_timestamp_strategy":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}","meta":{},"name":"snapshot_timestamp_strategy","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/strategies.sql","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.snapshot_timestamp_strategy"},"macro.dbt.split_part":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}","meta":{},"name":"split_part","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/split_part.sql","package_name":"dbt","path":"macros/utils/split_part.sql","resource_type":"macro","unique_id":"macro.dbt.split_part"},"macro.dbt.sql_convert_columns_in_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}","meta":{},"name":"sql_convert_columns_in_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/columns.sql","package_name":"dbt","path":"macros/adapters/columns.sql","resource_type":"macro","unique_id":"macro.dbt.sql_convert_columns_in_relation"},"macro.dbt.statement":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}","meta":{},"name":"statement","original_file_path":"dbt_internal_packages/dbt-adapters/macros/etc/statement.sql","package_name":"dbt","path":"macros/etc/statement.sql","resource_type":"macro","unique_id":"macro.dbt.statement"},"macro.dbt.strategy_dispatch":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}","meta":{},"name":"strategy_dispatch","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/strategies.sql","package_name":"dbt","path":"macros/materializations/snapshots/strategies.sql","resource_type":"macro","unique_id":"macro.dbt.strategy_dispatch"},"macro.dbt.string_literal":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n","meta":{},"name":"string_literal","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/literal.sql","package_name":"dbt","path":"macros/utils/literal.sql","resource_type":"macro","unique_id":"macro.dbt.string_literal"},"macro.dbt.support_multiple_grantees_per_dcl_statement":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}","meta":{},"name":"support_multiple_grantees_per_dcl_statement","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/apply_grants.sql","package_name":"dbt","path":"macros/adapters/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt.support_multiple_grantees_per_dcl_statement"},"macro.dbt.sync_column_schemas":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}","meta":{},"name":"sync_column_schemas","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/models/incremental/on_schema_change.sql","package_name":"dbt","path":"macros/materializations/models/incremental/on_schema_change.sql","resource_type":"macro","unique_id":"macro.dbt.sync_column_schemas"},"macro.dbt.t_database_name":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro t_database_name() %}\n  {{ return (adapter.dispatch(\"t_database_name\")()) }}\n{% endmacro %}","meta":{},"name":"t_database_name","original_file_path":"dbt_internal_packages/dbt-adapters/macros/internal/test/names.sql","package_name":"dbt","path":"macros/internal/test/names.sql","resource_type":"macro","unique_id":"macro.dbt.t_database_name"},"macro.dbt.t_schema_name":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro t_schema_name() %}\n  {{ return(target.schema) }}\n{% endmacro %}","meta":{},"name":"t_schema_name","original_file_path":"dbt_internal_packages/dbt-adapters/macros/internal/test/names.sql","package_name":"dbt","path":"macros/internal/test/names.sql","resource_type":"macro","unique_id":"macro.dbt.t_schema_name"},"macro.dbt.table_columns_and_constraints":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}","meta":{},"name":"table_columns_and_constraints","original_file_path":"dbt_internal_packages/dbt-adapters/macros/relations/column/columns_spec_ddl.sql","package_name":"dbt","path":"macros/relations/column/columns_spec_ddl.sql","resource_type":"macro","unique_id":"macro.dbt.table_columns_and_constraints"},"macro.dbt.test_accepted_values":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}","meta":{},"name":"test_accepted_values","original_file_path":"dbt_internal_packages/dbt-adapters/tests/generic/builtin.sql","package_name":"dbt","path":"tests/generic/builtin.sql","resource_type":"macro","unique_id":"macro.dbt.test_accepted_values"},"macro.dbt.test_not_null":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}","meta":{},"name":"test_not_null","original_file_path":"dbt_internal_packages/dbt-adapters/tests/generic/builtin.sql","package_name":"dbt","path":"tests/generic/builtin.sql","resource_type":"macro","unique_id":"macro.dbt.test_not_null"},"macro.dbt.test_relationships":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}","meta":{},"name":"test_relationships","original_file_path":"dbt_internal_packages/dbt-adapters/tests/generic/builtin.sql","package_name":"dbt","path":"tests/generic/builtin.sql","resource_type":"macro","unique_id":"macro.dbt.test_relationships"},"macro.dbt.test_unique":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}","meta":{},"name":"test_unique","original_file_path":"dbt_internal_packages/dbt-adapters/tests/generic/builtin.sql","package_name":"dbt","path":"tests/generic/builtin.sql","resource_type":"macro","unique_id":"macro.dbt.test_unique"},"macro.dbt.truncate_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}","meta":{},"name":"truncate_relation","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/relation.sql","package_name":"dbt","path":"macros/adapters/relation.sql","resource_type":"macro","unique_id":"macro.dbt.truncate_relation"},"macro.dbt.type_bigint":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n","meta":{},"name":"type_bigint","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/data_types.sql","package_name":"dbt","path":"macros/utils/data_types.sql","resource_type":"macro","unique_id":"macro.dbt.type_bigint"},"macro.dbt.type_boolean":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n","meta":{},"name":"type_boolean","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/data_types.sql","package_name":"dbt","path":"macros/utils/data_types.sql","resource_type":"macro","unique_id":"macro.dbt.type_boolean"},"macro.dbt.type_float":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n","meta":{},"name":"type_float","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/data_types.sql","package_name":"dbt","path":"macros/utils/data_types.sql","resource_type":"macro","unique_id":"macro.dbt.type_float"},"macro.dbt.type_int":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n","meta":{},"name":"type_int","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/data_types.sql","package_name":"dbt","path":"macros/utils/data_types.sql","resource_type":"macro","unique_id":"macro.dbt.type_int"},"macro.dbt.type_numeric":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n","meta":{},"name":"type_numeric","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/data_types.sql","package_name":"dbt","path":"macros/utils/data_types.sql","resource_type":"macro","unique_id":"macro.dbt.type_numeric"},"macro.dbt.type_string":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n","meta":{},"name":"type_string","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/data_types.sql","package_name":"dbt","path":"macros/utils/data_types.sql","resource_type":"macro","unique_id":"macro.dbt.type_string"},"macro.dbt.type_timestamp":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n","meta":{},"name":"type_timestamp","original_file_path":"dbt_internal_packages/dbt-adapters/macros/utils/data_types.sql","package_name":"dbt","path":"macros/utils/data_types.sql","resource_type":"macro","unique_id":"macro.dbt.type_timestamp"},"macro.dbt.unique_key_fields":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}","meta":{},"name":"unique_key_fields","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.unique_key_fields"},"macro.dbt.unique_key_is_not_null":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}","meta":{},"name":"unique_key_is_not_null","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.unique_key_is_not_null"},"macro.dbt.unique_key_is_null":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}","meta":{},"name":"unique_key_is_null","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.unique_key_is_null"},"macro.dbt.unique_key_join_on":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n\t    {% set source_unique_key = (identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {% set target_unique_key = (from_identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {{ equals(source_unique_key, target_unique_key) }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}","meta":{},"name":"unique_key_join_on","original_file_path":"dbt_internal_packages/dbt-adapters/macros/materializations/snapshots/helpers.sql","package_name":"dbt","path":"macros/materializations/snapshots/helpers.sql","resource_type":"macro","unique_id":"macro.dbt.unique_key_join_on"},"macro.dbt.validate_fixture_rows":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n","meta":{},"name":"validate_fixture_rows","original_file_path":"dbt_internal_packages/dbt-adapters/macros/unit_test_sql/get_fixture_sql.sql","package_name":"dbt","path":"macros/unit_test_sql/get_fixture_sql.sql","resource_type":"macro","unique_id":"macro.dbt.validate_fixture_rows"},"macro.dbt.validate_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}","meta":{},"name":"validate_sql","original_file_path":"dbt_internal_packages/dbt-adapters/macros/adapters/validate_sql.sql","package_name":"dbt","path":"macros/adapters/validate_sql.sql","resource_type":"macro","unique_id":"macro.dbt.validate_sql"},"macro.dbt_snowflake._get_create_dynamic_iceberg_table_as_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro _get_create_dynamic_iceberg_table_as_sql(dynamic_table, relation, sql) -%}\n{#-\n--  Produce DDL that creates a dynamic iceberg table\n--\n--  This follows the syntax outlined here:\n--  https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#create-dynamic-iceberg-table\n--\n--  Args:\n--  - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic iceberg table.\n-#}\n\n    create dynamic iceberg table {{ relation }}\n        target_lag = '{{ dynamic_table.target_lag }}'\n        warehouse = {{ dynamic_table.snowflake_warehouse }}\n        {{ optional('external_volume', dynamic_table.catalog.external_volume) }}\n        {{ optional('catalog', dynamic_table.catalog.name) }}\n        base_location = '{{ dynamic_table.catalog.base_location }}'\n        {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n        {{ optional('initialize', dynamic_table.initialize) }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}","meta":{},"name":"_get_create_dynamic_iceberg_table_as_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/relations/dynamic_table/create.sql","package_name":"dbt_snowflake","path":"macros/relations/dynamic_table/create.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake._get_create_dynamic_iceberg_table_as_sql"},"macro.dbt_snowflake._get_create_dynamic_standard_table_as_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro _get_create_dynamic_standard_table_as_sql(dynamic_table, relation, sql) -%}\n{#-\n--  Produce DDL that creates a standard dynamic table\n--\n--  This follows the syntax outlined here:\n--  https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#syntax\n--\n--  Args:\n--  - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic standard table.\n-#}\n\n    create dynamic table {{ relation }}\n        target_lag = '{{ dynamic_table.target_lag }}'\n        warehouse = {{ dynamic_table.snowflake_warehouse }}\n        {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n        {{ optional('initialize', dynamic_table.initialize) }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}","meta":{},"name":"_get_create_dynamic_standard_table_as_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/relations/dynamic_table/create.sql","package_name":"dbt_snowflake","path":"macros/relations/dynamic_table/create.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake._get_create_dynamic_standard_table_as_sql"},"macro.dbt_snowflake._get_describe_iceberg_catalog_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro _get_describe_iceberg_catalog_sql(relation) %}\n{#-\n--  Produce DQL that returns all relevant metadata about an iceberg catalog\n--\n--  Args:\n--  - relation: SnowflakeRelation - the relation to describe\n--  Returns:\n--      A valid DQL statement that will return metadata associated with an iceberg catalog\n-#}\n    show iceberg tables\n        like '{{ relation.identifier }}'\n        in schema {{ relation.database }}.{{ relation.schema }}\n    ;\n    select\n        \"catalog_name\",\n        \"external_volume_name\",\n        \"base_location\"\n    from table(result_scan(last_query_id()))\n{% endmacro %}","meta":{},"name":"_get_describe_iceberg_catalog_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/relations/dynamic_table/describe.sql","package_name":"dbt_snowflake","path":"macros/relations/dynamic_table/describe.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake._get_describe_iceberg_catalog_sql"},"macro.dbt_snowflake._get_replace_dynamic_iceberg_table_as_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro _get_replace_dynamic_iceberg_table_as_sql(dynamic_table, relation, sql) -%}\n{#-\n--  Produce DDL that replaces a dynamic iceberg table with a new dynamic iceberg table\n--\n--  This follows the syntax outlined here:\n--  https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#create-dynamic-iceberg-table\n--\n--  Args:\n--  - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic iceberg table.\n-#}\n\n    create or replace dynamic iceberg table {{ relation }}\n        target_lag = '{{ dynamic_table.target_lag }}'\n        warehouse = {{ dynamic_table.snowflake_warehouse }}\n        {{ optional('external_volume', dynamic_table.catalog.external_volume) }}\n        {{ optional('catalog', dynamic_table.catalog.name) }}\n        base_location = '{{ dynamic_table.catalog.base_location }}'\n        {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n        {{ optional('initialize', dynamic_table.initialize) }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}","meta":{},"name":"_get_replace_dynamic_iceberg_table_as_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/relations/dynamic_table/replace.sql","package_name":"dbt_snowflake","path":"macros/relations/dynamic_table/replace.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake._get_replace_dynamic_iceberg_table_as_sql"},"macro.dbt_snowflake._get_replace_dynamic_standard_table_as_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro _get_replace_dynamic_standard_table_as_sql(dynamic_table, relation, sql) -%}\n{#-\n--  Produce DDL that replaces a standard dynamic table with a new standard dynamic table\n--\n--  This follows the syntax outlined here:\n--  https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#syntax\n--\n--  Args:\n--  - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic standard table.\n-#}\n\n    create or replace dynamic table {{ relation }}\n        target_lag = '{{ dynamic_table.target_lag }}'\n        warehouse = {{ dynamic_table.snowflake_warehouse }}\n        {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n        {{ optional('initialize', dynamic_table.initialize) }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}","meta":{},"name":"_get_replace_dynamic_standard_table_as_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/relations/dynamic_table/replace.sql","package_name":"dbt_snowflake","path":"macros/relations/dynamic_table/replace.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake._get_replace_dynamic_standard_table_as_sql"},"macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n{%- set tmp_relation_type = config.get('tmp_relation_type') -%}\n  /* {#\n       High-level principles:\n       If we are running multiple statements (DELETE + INSERT),\n       and we want to guarantee identical inputs to both statements,\n       then we must first save the model query results as a temporary table\n       (which presumably comes with a performance cost).\n       If we are running a single statement (MERGE or INSERT alone),\n       we _may_ save the model query definition as a view instead,\n       for (presumably) faster overall incremental processing.\n\n       Low-level specifics:\n       If an invalid option is specified, then we will raise an\n       excpetion with corresponding message.\n\n       Languages other than SQL (like Python) will use a temporary table.\n       With the default strategy of merge, the user may choose between a temporary\n       table and view (defaulting to view).\n\n       The append strategy can use a view because it will run a single INSERT statement.\n\n       When unique_key is none, the delete+insert and microbatch strategies can use a view beacuse a\n       single INSERT statement is run with no DELETES as part of the statement.\n       Otherwise, play it safe by using a temporary table.\n  #} */\n\n  {% if language == \"python\" and tmp_relation_type is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models currently only support 'table' for tmp_relation_type but \"\n       ~ tmp_relation_type ~ \" was specified.\"\n    ) %}\n  {% endif %}\n\n  {% if strategy in [\"delete+insert\", \"microbatch\"] and tmp_relation_type is not none and tmp_relation_type != \"table\" and unique_key is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"In order to maintain consistent results when `unique_key` is not none,\n      the `\" ~ strategy ~ \"` strategy only supports `table` for `tmp_relation_type` but \"\n      ~ tmp_relation_type ~ \" was specified.\"\n      )\n  %}\n  {% endif %}\n\n  {% if language != \"sql\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"table\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"view\" %}\n    {{ return(\"view\") }}\n  {% elif strategy in (\"default\", \"merge\", \"append\", \"insert_overwrite\") %}\n    {{ return(\"view\") }}\n  {% elif strategy in [\"delete+insert\", \"microbatch\"] and unique_key is none %}\n    {{ return(\"view\") }}\n  {% else %}\n    {{ return(\"table\") }}\n  {% endif %}\n{% endmacro %}","meta":{},"name":"dbt_snowflake_get_tmp_relation_type","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/materializations/incremental.sql","package_name":"dbt_snowflake","path":"macros/materializations/incremental.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type"},"macro.dbt_snowflake.dynamic_table_execute_build_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) %}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n{% endmacro %}","meta":{},"name":"dynamic_table_execute_build_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/materializations/dynamic_table.sql","package_name":"dbt_snowflake","path":"macros/materializations/dynamic_table.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.dynamic_table_execute_build_sql"},"macro.dbt_snowflake.dynamic_table_execute_no_op":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro dynamic_table_execute_no_op(relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}","meta":{},"name":"dynamic_table_execute_no_op","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/materializations/dynamic_table.sql","package_name":"dbt_snowflake","path":"macros/materializations/dynamic_table.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.dynamic_table_execute_no_op"},"macro.dbt_snowflake.dynamic_table_get_build_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_dynamic_table %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = snowflake__get_dynamic_table_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"No configuration changes were identified on: `\" ~ target_relation ~ \"`. Continuing.\") }}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = snowflake__get_alter_dynamic_table_as_sql(existing_relation, configuration_changes, target_relation, sql) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'continue', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario: `\" ~ on_configuration_change ~ \"`\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}","meta":{},"name":"dynamic_table_get_build_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/materializations/dynamic_table.sql","package_name":"dbt_snowflake","path":"macros/materializations/dynamic_table.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.dynamic_table_get_build_sql"},"macro.dbt_snowflake.get_column_comment_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}","meta":{},"name":"get_column_comment_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/adapters.sql","package_name":"dbt_snowflake","path":"macros/adapters.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.get_column_comment_sql"},"macro.dbt_snowflake.get_current_query_tag":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}","meta":{},"name":"get_current_query_tag","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/adapters.sql","package_name":"dbt_snowflake","path":"macros/adapters.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.get_current_query_tag"},"macro.dbt_snowflake.get_persist_docs_column_list":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}","meta":{},"name":"get_persist_docs_column_list","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/adapters.sql","package_name":"dbt_snowflake","path":"macros/adapters.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.get_persist_docs_column_list"},"macro.dbt_snowflake.materialization_dynamic_table_snowflake":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% materialization dynamic_table, adapter='snowflake' %}\n\n    {% set query_tag = set_query_tag() %}\n\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.DynamicTable) %}\n\n    {{ run_hooks(pre_hooks) }}\n\n    {% set build_sql = dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% if build_sql == '' %}\n        {{ dynamic_table_execute_no_op(target_relation) }}\n    {% else %}\n        {{ dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) }}\n    {% endif %}\n\n    {{ run_hooks(post_hooks) }}\n\n    {% do unset_query_tag(query_tag) %}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}","meta":{},"name":"materialization_dynamic_table_snowflake","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/materializations/dynamic_table.sql","package_name":"dbt_snowflake","path":"macros/materializations/dynamic_table.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.materialization_dynamic_table_snowflake"},"macro.dbt_snowflake.materialization_incremental_snowflake":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n\n  {%- set identifier = this.name -%}\n\n  {%- set target_relation = api.Relation.create(\n\tidentifier=identifier,\n\tschema=schema,\n\tdatabase=database,\n\ttype='table',\n\ttable_format=config.get('table_format', 'default')\n  ) -%}\n\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n    {% if target_relation.needs_to_drop(existing_relation) %}\n      {{ drop_relation_if_exists(existing_relation) }}\n    {% endif %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif target_relation.table_format != existing_relation.table_format %}\n    {% do exceptions.raise_compiler_error(\n        \"Unable to update the incremental model `\" ~ target_relation.identifier ~ \"` from `\" ~ existing_relation.table_format ~ \"` to `\" ~ target_relation.table_format ~ \"` due to Snowflake limitation. Please execute with --full-refresh to drop the table and recreate in the new catalog.'\"\n      )\n    %}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}","meta":{},"name":"materialization_incremental_snowflake","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/materializations/incremental.sql","package_name":"dbt_snowflake","path":"macros/materializations/incremental.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.materialization_incremental_snowflake"},"macro.dbt_snowflake.materialization_seed_snowflake":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}","meta":{},"name":"materialization_seed_snowflake","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/materializations/seed.sql","package_name":"dbt_snowflake","path":"macros/materializations/seed.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.materialization_seed_snowflake"},"macro.dbt_snowflake.materialization_snapshot_snowflake":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}","meta":{},"name":"materialization_snapshot_snowflake","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/materializations/snapshot.sql","package_name":"dbt_snowflake","path":"macros/materializations/snapshot.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.materialization_snapshot_snowflake"},"macro.dbt_snowflake.materialization_table_snowflake":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set existing_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set target_relation = api.Relation.create(\n\tidentifier=identifier,\n\tschema=schema,\n\tdatabase=database,\n\ttype='table',\n\ttable_format=config.get('table_format', 'default')\n   ) -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if target_relation.needs_to_drop(existing_relation) %}\n    {{ drop_relation_if_exists(existing_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}","meta":{},"name":"materialization_table_snowflake","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/materializations/table.sql","package_name":"dbt_snowflake","path":"macros/materializations/table.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.materialization_table_snowflake"},"macro.dbt_snowflake.materialization_test_snowflake":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}","meta":{},"name":"materialization_test_snowflake","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/materializations/test.sql","package_name":"dbt_snowflake","path":"macros/materializations/test.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.materialization_test_snowflake"},"macro.dbt_snowflake.materialization_view_snowflake":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set to_return = snowflake__create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}","meta":{},"name":"materialization_view_snowflake","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/materializations/view.sql","package_name":"dbt_snowflake","path":"macros/materializations/view.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.materialization_view_snowflake"},"macro.dbt_snowflake.optional":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro optional(name, value, quote_char = '', equals_char = '= ') %}\n{#-\n--  Insert optional DDL parameters only when their value is provided; makes DDL statements more readable\n--\n--  Args:\n--  - name: the name of the DDL option\n--  - value: the value of the DDL option, may be None\n--  - quote_char: the quote character to use (e.g. '\"', '(', etc.), leave blank if unnecessary\n--  - equals_char: the equals character to use (e.g. '= ')\n--  Returns:\n--      If the value is not None (e.g. provided by the user), return the option setting DDL\n--      If the value is None, return an empty string\n-#}\n{%- set quote_char_right = ')' if quote_char == '(' else quote_char -%}\n{% if value is not none %}{{ name }} {{ equals_char }}{{ quote_char }}{{ value }}{{ quote_char_right }}{% endif %}\n{% endmacro %}","meta":{},"name":"optional","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/utils/optional.sql","package_name":"dbt_snowflake","path":"macros/utils/optional.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.optional"},"macro.dbt_snowflake.set_query_tag":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}","meta":{},"name":"set_query_tag","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/adapters.sql","package_name":"dbt_snowflake","path":"macros/adapters.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.set_query_tag"},"macro.dbt_snowflake.snowflake__alter_column_comment":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n    alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}","meta":{},"name":"snowflake__alter_column_comment","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/adapters.sql","package_name":"dbt_snowflake","path":"macros/adapters.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__alter_column_comment"},"macro.dbt_snowflake.snowflake__alter_column_type":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter {{ relation.get_ddl_prefix_for_alter() }} table {{ relation.render() }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}","meta":{},"name":"snowflake__alter_column_type","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/adapters.sql","package_name":"dbt_snowflake","path":"macros/adapters.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__alter_column_type"},"macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"dynamic table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n\n    {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n    {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n{% endmacro %}","meta":{},"name":"snowflake__alter_relation_add_remove_columns","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/adapters.sql","package_name":"dbt_snowflake","path":"macros/adapters.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"},"macro.dbt_snowflake.snowflake__alter_relation_comment":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n    {%- if relation.is_dynamic_table -%}\n        {%- set relation_type = 'dynamic table' -%}\n    {%- else -%}\n        {%- set relation_type = relation.type -%}\n    {%- endif -%}\n    comment on {{ relation_type }} {{ relation.render() }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}","meta":{},"name":"snowflake__alter_relation_comment","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/adapters.sql","package_name":"dbt_snowflake","path":"macros/adapters.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__alter_relation_comment"},"macro.dbt_snowflake.snowflake__array_construct":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}","meta":{},"name":"snowflake__array_construct","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/utils/array_construct.sql","package_name":"dbt_snowflake","path":"macros/utils/array_construct.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__array_construct"},"macro.dbt_snowflake.snowflake__bool_or":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}","meta":{},"name":"snowflake__bool_or","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/utils/bool_or.sql","package_name":"dbt_snowflake","path":"macros/utils/bool_or.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__bool_or"},"macro.dbt_snowflake.snowflake__can_clone_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}","meta":{},"name":"snowflake__can_clone_table","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/materializations/clone.sql","package_name":"dbt_snowflake","path":"macros/materializations/clone.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__can_clone_table"},"macro.dbt_snowflake.snowflake__cast":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__cast(field, type) %}\n    {% if (type|upper == \"GEOGRAPHY\") -%}\n        to_geography({{field}})\n    {% elif (type|upper == \"GEOMETRY\") -%}\n        to_geometry({{field}})\n    {% else -%}\n        cast({{field}} as {{type}})\n    {% endif -%}\n{% endmacro %}","meta":{},"name":"snowflake__cast","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/utils/cast.sql","package_name":"dbt_snowflake","path":"macros/utils/cast.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__cast"},"macro.dbt_snowflake.snowflake__catalog_equals":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__catalog_equals(field, value) %}\n    \"{{ field }}\" ilike '{{ value }}' and upper(\"{{ field }}\") = upper('{{ value }}')\n{% endmacro %}","meta":{},"name":"snowflake__catalog_equals","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/catalog.sql","package_name":"dbt_snowflake","path":"macros/catalog.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__catalog_equals"},"macro.dbt_snowflake.snowflake__check_schema_exists":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}","meta":{},"name":"snowflake__check_schema_exists","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/adapters.sql","package_name":"dbt_snowflake","path":"macros/adapters.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__check_schema_exists"},"macro.dbt_snowflake.snowflake__copy_grants":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}","meta":{},"name":"snowflake__copy_grants","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/apply_grants.sql","package_name":"dbt_snowflake","path":"macros/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__copy_grants"},"macro.dbt_snowflake.snowflake__create_or_replace_clone":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      {{ \"transient\" if config.get(\"transient\", true) }}\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n      {{ \"copy grants\" if config.get(\"copy_grants\", false) }}\n{% endmacro %}","meta":{},"name":"snowflake__create_or_replace_clone","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/materializations/clone.sql","package_name":"dbt_snowflake","path":"macros/materializations/clone.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__create_or_replace_clone"},"macro.dbt_snowflake.snowflake__create_or_replace_view":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}","meta":{},"name":"snowflake__create_or_replace_view","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/relations/view/create.sql","package_name":"dbt_snowflake","path":"macros/relations/view/create.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__create_or_replace_view"},"macro.dbt_snowflake.snowflake__create_table_as":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n\n  {%- if relation.is_iceberg_format and not adapter.behavior.enable_iceberg_materializations.no_warn %}\n    {% do exceptions.raise_compiler_error('Was unable to create model as Iceberg Table Format. Please set the `enable_iceberg_materializations` behavior flag to True in your dbt_project.yml. For more information, go to https://docs.getdbt.com/reference/resource-configs/snowflake-configs#iceberg-table-format') %}\n  {%- endif %}\n\n  {%- set materialization_prefix = relation.get_ddl_prefix_for_create(config.model.config, temporary) -%}\n  {%- set alter_prefix = relation.get_ddl_prefix_for_alter() -%}\n\n  {# Generate DDL/DML #}\n  {%- if language == 'sql' -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {{ materialization_prefix }} table {{ relation }}\n        {%- if relation.is_iceberg_format %}\n          {#\n            Valid DDL in CTAS statements. Plain create statements have a different order.\n            https://docs.snowflake.com/en/sql-reference/sql/create-iceberg-table\n          #}\n          {{ relation.get_iceberg_ddl_options(config.model.config) }}\n        {%- endif -%}\n\n        {%- set contract_config = config.get('contract') -%}\n        {%- if contract_config.enforced -%}\n          {{ get_assert_columns_equivalent(sql) }}\n          {{ get_table_columns_and_constraints() }}\n          {% set compiled_code = get_select_subquery(compiled_code) %}\n        {% endif %}\n        {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from (\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter {{ alter_prefix }} table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary %}\n        alter {{ alter_prefix }} table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {%- if relation.is_iceberg_format %}\n      {% do exceptions.raise_compiler_error('Iceberg is incompatible with Python models. Please use a SQL model for the iceberg format.') %}\n    {%- endif %}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, table_type=relation.get_ddl_prefix_for_create(config.model.config, temporary)) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}","meta":{},"name":"snowflake__create_table_as","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/relations/table/create.sql","package_name":"dbt_snowflake","path":"macros/relations/table/create.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__create_table_as"},"macro.dbt_snowflake.snowflake__create_view_as":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__create_view_as(relation, sql) -%}\n  {{ snowflake__create_view_as_with_temp_flag(relation, sql) }}\n{% endmacro %}","meta":{},"name":"snowflake__create_view_as","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/relations/view/create.sql","package_name":"dbt_snowflake","path":"macros/relations/view/create.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__create_view_as"},"macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__create_view_as_with_temp_flag(relation, sql, is_temporary=False) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} {% if is_temporary -%}\n    temporary\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}","meta":{},"name":"snowflake__create_view_as_with_temp_flag","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/relations/view/create.sql","package_name":"dbt_snowflake","path":"macros/relations/view/create.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag"},"macro.dbt_snowflake.snowflake__current_timestamp":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}","meta":{},"name":"snowflake__current_timestamp","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/utils/timestamps.sql","package_name":"dbt_snowflake","path":"macros/utils/timestamps.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__current_timestamp"},"macro.dbt_snowflake.snowflake__current_timestamp_backcompat":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}","meta":{},"name":"snowflake__current_timestamp_backcompat","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/utils/timestamps.sql","package_name":"dbt_snowflake","path":"macros/utils/timestamps.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__current_timestamp_backcompat"},"macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}","meta":{},"name":"snowflake__current_timestamp_in_utc_backcompat","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/utils/timestamps.sql","package_name":"dbt_snowflake","path":"macros/utils/timestamps.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"},"macro.dbt_snowflake.snowflake__date_spine":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__date_spine(datepart, start_date, end_date) %}\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from table(flatten(input => array_generate_range(0, {{ dbt.datediff(start_date, end_date, datepart) }} )))\n{% endmacro %}","meta":{},"name":"snowflake__date_spine","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/utils/date_spine.sql","package_name":"dbt_snowflake","path":"macros/utils/date_spine.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__date_spine"},"macro.dbt_snowflake.snowflake__describe_dynamic_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__describe_dynamic_table(relation) %}\n{#-\n--  Get all relevant metadata about a dynamic table\n--\n--  Args:\n--  - relation: SnowflakeRelation - the relation to describe\n--  Returns:\n--      A dictionary with one or two entries depending on whether iceberg is enabled:\n--      - dynamic_table: the metadata associated with a standard dynamic table\n--      - catalog: the metadata associated with the iceberg catalog\n-#}\n    {%- set _dynamic_table_sql -%}\n        show dynamic tables\n            like '{{ relation.identifier }}'\n            in schema {{ relation.database }}.{{ relation.schema }}\n        ;\n        select\n            \"name\",\n            \"schema_name\",\n            \"database_name\",\n            \"text\",\n            \"target_lag\",\n            \"warehouse\",\n            \"refresh_mode\"\n        from table(result_scan(last_query_id()))\n    {%- endset %}\n    {% set results = {'dynamic_table': run_query(_dynamic_table_sql)} %}\n\n    {% if adapter.behavior.enable_iceberg_materializations.no_warn %}\n        {% set _ = results.update({'catalog': run_query(_get_describe_iceberg_catalog_sql(relation))}) %}\n    {% endif %}\n\n    {% do return(results) %}\n{% endmacro %}","meta":{},"name":"snowflake__describe_dynamic_table","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/relations/dynamic_table/describe.sql","package_name":"dbt_snowflake","path":"macros/relations/dynamic_table/describe.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__describe_dynamic_table"},"macro.dbt_snowflake.snowflake__escape_single_quotes":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}","meta":{},"name":"snowflake__escape_single_quotes","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/utils/escape_single_quotes.sql","package_name":"dbt_snowflake","path":"macros/utils/escape_single_quotes.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__escape_single_quotes"},"macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__get_alter_dynamic_table_as_sql(\n    existing_relation,\n    configuration_changes,\n    target_relation,\n    sql\n) -%}\n    {{- log('Applying ALTER to: ' ~ existing_relation) -}}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{- get_replace_sql(existing_relation, target_relation, sql) -}}\n\n    {% else %}\n\n        {%- set target_lag = configuration_changes.target_lag -%}\n        {%- if target_lag -%}{{- log('Applying UPDATE TARGET_LAG to: ' ~ existing_relation) -}}{%- endif -%}\n        {%- set snowflake_warehouse = configuration_changes.snowflake_warehouse -%}\n        {%- if snowflake_warehouse -%}{{- log('Applying UPDATE WAREHOUSE to: ' ~ existing_relation) -}}{%- endif -%}\n\n        alter dynamic table {{ existing_relation }} set\n            {% if target_lag %}target_lag = '{{ target_lag.context }}'{% endif %}\n            {% if snowflake_warehouse %}warehouse = {{ snowflake_warehouse.context }}{% endif %}\n\n    {%- endif -%}\n\n{%- endmacro %}","meta":{},"name":"snowflake__get_alter_dynamic_table_as_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/relations/dynamic_table/alter.sql","package_name":"dbt_snowflake","path":"macros/relations/dynamic_table/alter.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql"},"macro.dbt_snowflake.snowflake__get_catalog":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__get_catalog(information_schema, schemas) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(information_schema) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(information_schema) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}","meta":{},"name":"snowflake__get_catalog","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/catalog.sql","package_name":"dbt_snowflake","path":"macros/catalog.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__get_catalog"},"macro.dbt_snowflake.snowflake__get_catalog_columns_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__get_catalog_columns_sql(information_schema) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n\n        column_name as \"column_name\",\n        ordinal_position as \"column_index\",\n        data_type as \"column_type\",\n        comment as \"column_comment\"\n    from {{ information_schema }}.columns\n{%- endmacro %}","meta":{},"name":"snowflake__get_catalog_columns_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/catalog.sql","package_name":"dbt_snowflake","path":"macros/catalog.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__get_catalog_columns_sql"},"macro.dbt_snowflake.snowflake__get_catalog_relations":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__get_catalog_relations(information_schema, relations) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(information_schema) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(information_schema) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}","meta":{},"name":"snowflake__get_catalog_relations","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/catalog.sql","package_name":"dbt_snowflake","path":"macros/catalog.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__get_catalog_relations"},"macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__get_catalog_relations_where_clause_sql(relations) -%}\n    where (\n        {%- for relation in relations -%}\n            {% if relation.schema and relation.identifier %}\n                (\n                    {{ snowflake__catalog_equals('table_schema', relation.schema) }}\n                    and {{ snowflake__catalog_equals('table_name', relation.identifier) }}\n                )\n            {% elif relation.schema %}\n                (\n                    {{ snowflake__catalog_equals('table_schema', relation.schema) }}\n                )\n            {% else %}\n                {% do exceptions.raise_compiler_error(\n                    '`get_catalog_relations` requires a list of relations, each with a schema'\n                ) %}\n            {% endif %}\n\n            {%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n{%- endmacro %}","meta":{},"name":"snowflake__get_catalog_relations_where_clause_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/catalog.sql","package_name":"dbt_snowflake","path":"macros/catalog.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql"},"macro.dbt_snowflake.snowflake__get_catalog_results_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__get_catalog_results_sql() -%}\n    select *\n    from tables\n    join columns using (\"table_database\", \"table_schema\", \"table_name\")\n    order by \"column_index\"\n{%- endmacro %}","meta":{},"name":"snowflake__get_catalog_results_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/catalog.sql","package_name":"dbt_snowflake","path":"macros/catalog.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__get_catalog_results_sql"},"macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__get_catalog_schemas_where_clause_sql(schemas) -%}\n    where ({%- for schema in schemas -%}\n        ({{ snowflake__catalog_equals('table_schema', schema) }}){%- if not loop.last %} or {% endif -%}\n    {%- endfor -%})\n{%- endmacro %}","meta":{},"name":"snowflake__get_catalog_schemas_where_clause_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/catalog.sql","package_name":"dbt_snowflake","path":"macros/catalog.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql"},"macro.dbt_snowflake.snowflake__get_catalog_tables_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__get_catalog_tables_sql(information_schema) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n        case\n            when is_dynamic = 'YES' and table_type = 'BASE TABLE' THEN 'DYNAMIC TABLE'\n            else table_type\n        end as \"table_type\",\n        comment as \"table_comment\",\n\n        -- note: this is the _role_ that owns the table\n        table_owner as \"table_owner\",\n\n        'Clustering Key' as \"stats:clustering_key:label\",\n        clustering_key as \"stats:clustering_key:value\",\n        'The key used to cluster this table' as \"stats:clustering_key:description\",\n        (clustering_key is not null) as \"stats:clustering_key:include\",\n\n        'Row Count' as \"stats:row_count:label\",\n        row_count as \"stats:row_count:value\",\n        'An approximate count of rows in this table' as \"stats:row_count:description\",\n        (row_count is not null) as \"stats:row_count:include\",\n\n        'Approximate Size' as \"stats:bytes:label\",\n        bytes as \"stats:bytes:value\",\n        'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n        (bytes is not null) as \"stats:bytes:include\",\n\n        'Last Modified' as \"stats:last_modified:label\",\n        to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n        'The timestamp for last update/change' as \"stats:last_modified:description\",\n        (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n    from {{ information_schema }}.tables\n{%- endmacro %}","meta":{},"name":"snowflake__get_catalog_tables_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/catalog.sql","package_name":"dbt_snowflake","path":"macros/catalog.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__get_catalog_tables_sql"},"macro.dbt_snowflake.snowflake__get_columns_in_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation.render() }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation.render() }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}","meta":{},"name":"snowflake__get_columns_in_relation","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/adapters.sql","package_name":"dbt_snowflake","path":"macros/adapters.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__get_columns_in_relation"},"macro.dbt_snowflake.snowflake__get_create_backup_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro snowflake__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    -- use `render` to ensure that the fully qualified name is used\n    {{ get_rename_sql(relation, backup_relation.render()) }}\n\n{%- endmacro -%}","meta":{},"name":"snowflake__get_create_backup_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/relations/create_backup.sql","package_name":"dbt_snowflake","path":"macros/relations/create_backup.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__get_create_backup_sql"},"macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__get_create_dynamic_table_as_sql(relation, sql) -%}\n{#-\n--  Produce DDL that creates a dynamic table\n--\n--  Args:\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Globals:\n--  - config: NodeConfig - contains the attribution required to produce a SnowflakeDynamicTableConfig\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic table.\n-#}\n\n    {%- set dynamic_table = relation.from_config(config.model) -%}\n\n    {%- if dynamic_table.catalog.table_format == 'iceberg' -%}\n        {{ _get_create_dynamic_iceberg_table_as_sql(dynamic_table, relation, sql) }}\n    {%- else -%}\n        {{ _get_create_dynamic_standard_table_as_sql(dynamic_table, relation, sql) }}\n    {%- endif -%}\n\n{%- endmacro %}","meta":{},"name":"snowflake__get_create_dynamic_table_as_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/relations/dynamic_table/create.sql","package_name":"dbt_snowflake","path":"macros/relations/dynamic_table/create.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql"},"macro.dbt_snowflake.snowflake__get_create_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__get_create_sql(relation, sql) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_create_dynamic_table_as_sql(relation, sql) }}\n\n    {% else %}\n        {{ default__get_create_sql(relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}","meta":{},"name":"snowflake__get_create_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/relations/create.sql","package_name":"dbt_snowflake","path":"macros/relations/create.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__get_create_sql"},"macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}","meta":{},"name":"snowflake__get_delete_insert_merge_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/materializations/incremental/merge.sql","package_name":"dbt_snowflake","path":"macros/materializations/incremental/merge.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"},"macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__get_drop_dynamic_table_sql(relation) %}\n    drop dynamic table if exists {{ relation }}\n{% endmacro %}","meta":{},"name":"snowflake__get_drop_dynamic_table_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/relations/dynamic_table/drop.sql","package_name":"dbt_snowflake","path":"macros/relations/dynamic_table/drop.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql"},"macro.dbt_snowflake.snowflake__get_drop_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__get_drop_sql(relation) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_drop_dynamic_table_sql(relation) }}\n\n    {% else %}\n        {{ default__get_drop_sql(relation) }}\n\n    {% endif %}\n\n{% endmacro %}","meta":{},"name":"snowflake__get_drop_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/relations/drop.sql","package_name":"dbt_snowflake","path":"macros/relations/drop.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__get_drop_sql"},"macro.dbt_snowflake.snowflake__get_drop_table_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__get_drop_table_sql(relation) %}\n    drop table if exists {{ relation }} cascade\n{% endmacro %}","meta":{},"name":"snowflake__get_drop_table_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/relations/table/drop.sql","package_name":"dbt_snowflake","path":"macros/relations/table/drop.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__get_drop_table_sql"},"macro.dbt_snowflake.snowflake__get_drop_view_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__get_drop_view_sql(relation) %}\n    drop view if exists {{ relation }} cascade\n{% endmacro %}","meta":{},"name":"snowflake__get_drop_view_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/relations/view/drop.sql","package_name":"dbt_snowflake","path":"macros/relations/view/drop.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__get_drop_view_sql"},"macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__get_dynamic_table_configuration_changes(existing_relation, new_config) -%}\n    {% set _existing_dynamic_table = snowflake__describe_dynamic_table(existing_relation) %}\n    {% set _configuration_changes = existing_relation.dynamic_table_config_changeset(_existing_dynamic_table, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{%- endmacro %}","meta":{},"name":"snowflake__get_dynamic_table_configuration_changes","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/materializations/dynamic_table.sql","package_name":"dbt_snowflake","path":"macros/materializations/dynamic_table.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes"},"macro.dbt_snowflake.snowflake__get_incremental_append_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% set dml = default__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}","meta":{},"name":"snowflake__get_incremental_append_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/materializations/incremental/merge.sql","package_name":"dbt_snowflake","path":"macros/materializations/incremental/merge.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__get_incremental_append_sql"},"macro.dbt_snowflake.snowflake__get_incremental_default_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}","meta":{},"name":"snowflake__get_incremental_default_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/materializations/incremental.sql","package_name":"dbt_snowflake","path":"macros/materializations/incremental.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__get_incremental_default_sql"},"macro.dbt_snowflake.snowflake__get_incremental_insert_overwrite_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__get_incremental_insert_overwrite_sql(arg_dict) -%}\n  {{ adapter.dispatch('insert_overwrite_get_sql', 'dbt')(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"]) }}\n{%- endmacro %}","meta":{},"name":"snowflake__get_incremental_insert_overwrite_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/materializations/incremental/insert_overwrite.sql","package_name":"dbt_snowflake","path":"macros/materializations/incremental/insert_overwrite.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__get_incremental_insert_overwrite_sql"},"macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__get_incremental_microbatch_sql(arg_dict) %}\n    {%- set target = arg_dict[\"target_relation\"] -%}\n    {%- set source = arg_dict[\"temp_relation\"] -%}\n    {%- set dest_columns = arg_dict[\"dest_columns\"] -%}\n    {%- set incremental_predicates = [] if arg_dict.get('incremental_predicates') is none else arg_dict.get('incremental_predicates') -%}\n\n    {#-- Add additional incremental_predicates to filter for batch --#}\n    {% if model.batch and model.batch.event_time_start -%}\n        {% do incremental_predicates.append(\"DBT_INTERNAL_TARGET.\" ~ model.config.event_time ~ \" >= to_timestamp_tz('\" ~ model.config.__dbt_internal_microbatch_event_time_start ~ \"')\") %}\n    {% endif %}\n    {% if model.batch and model.batch.event_time_end -%}\n        {% do incremental_predicates.append(\"DBT_INTERNAL_TARGET.\" ~ model.config.event_time ~ \" < to_timestamp_tz('\" ~ model.config.__dbt_internal_microbatch_event_time_end ~ \"')\") %}\n    {% endif %}\n    {% do arg_dict.update({'incremental_predicates': incremental_predicates}) %}\n\n    delete from {{ target }} DBT_INTERNAL_TARGET\n    where (\n    {% for predicate in incremental_predicates %}\n        {%- if not loop.first %}and {% endif -%} {{ predicate }}\n    {% endfor %}\n    );\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n{% endmacro %}","meta":{},"name":"snowflake__get_incremental_microbatch_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/materializations/incremental/merge.sql","package_name":"dbt_snowflake","path":"macros/materializations/incremental/merge.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql"},"macro.dbt_snowflake.snowflake__get_merge_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}","meta":{},"name":"snowflake__get_merge_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/materializations/incremental/merge.sql","package_name":"dbt_snowflake","path":"macros/materializations/incremental/merge.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__get_merge_sql"},"macro.dbt_snowflake.snowflake__get_relation_last_modified":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__get_relation_last_modified(information_schema, relations) -%}\n\n  {%- call statement('last_modified', fetch_result=True) -%}\n        select table_schema as schema,\n               table_name as identifier,\n               last_altered as last_modified,\n               {{ current_timestamp() }} as snapshotted_at\n        from {{ information_schema }}.tables\n        where (\n          {%- for relation in relations -%}\n            (upper(table_schema) = upper('{{ relation.schema }}') and\n             upper(table_name) = upper('{{ relation.identifier }}')){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n  {%- endcall -%}\n\n  {{ return(load_result('last_modified')) }}\n\n{% endmacro %}","meta":{},"name":"snowflake__get_relation_last_modified","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/metadata.sql","package_name":"dbt_snowflake","path":"macros/metadata.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__get_relation_last_modified"},"macro.dbt_snowflake.snowflake__get_rename_intermediate_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro snowflake__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- use `render` to ensure that the fully qualified name is used\n    {{ get_rename_sql(intermediate_relation, relation.render()) }}\n\n{%- endmacro -%}","meta":{},"name":"snowflake__get_rename_intermediate_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/relations/rename_intermediate.sql","package_name":"dbt_snowflake","path":"macros/relations/rename_intermediate.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__get_rename_intermediate_sql"},"macro.dbt_snowflake.snowflake__get_rename_table_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro snowflake__get_rename_table_sql(relation, new_name) -%}\n    /*\n    Rename or move a table to the new name.\n\n    Args:\n        relation: SnowflakeRelation - relation to be renamed\n        new_name: Union[str, SnowflakeRelation] - new name for `relation`\n            if providing a string, the default database/schema will be used if that string is just an identifier\n            if providing a SnowflakeRelation, `render` will be used to produce a fully qualified name\n    Returns: templated string\n    */\n    alter table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}","meta":{},"name":"snowflake__get_rename_table_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/relations/table/rename.sql","package_name":"dbt_snowflake","path":"macros/relations/table/rename.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__get_rename_table_sql"},"macro.dbt_snowflake.snowflake__get_rename_view_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro snowflake__get_rename_view_sql(relation, new_name) -%}\n    /*\n    Rename or move a view to the new name.\n\n    Args:\n        relation: SnowflakeRelation - relation to be renamed\n        new_name: Union[str, SnowflakeRelation] - new name for `relation`\n            if providing a string, the default database/schema will be used if that string is just an identifier\n            if providing a SnowflakeRelation, `render` will be used to produce a fully qualified name\n    Returns: templated string\n    */\n    alter view {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}","meta":{},"name":"snowflake__get_rename_view_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/relations/view/rename.sql","package_name":"dbt_snowflake","path":"macros/relations/view/rename.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__get_rename_view_sql"},"macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__get_replace_dynamic_table_sql(relation, sql) -%}\n{#-\n--  Produce DDL that replaces a dynamic table with a new dynamic table\n--\n--  Args:\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Globals:\n--  - config: NodeConfig - contains the attribution required to produce a SnowflakeDynamicTableConfig\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic table.\n-#}\n\n    {%- set dynamic_table = relation.from_config(config.model) -%}\n\n    {%- if dynamic_table.catalog.table_format == 'iceberg' -%}\n        {{ _get_replace_dynamic_iceberg_table_as_sql(dynamic_table, relation, sql) }}\n    {%- else -%}\n        {{ _get_replace_dynamic_standard_table_as_sql(dynamic_table, relation, sql) }}\n    {%- endif -%}\n\n{%- endmacro %}","meta":{},"name":"snowflake__get_replace_dynamic_table_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/relations/dynamic_table/replace.sql","package_name":"dbt_snowflake","path":"macros/relations/dynamic_table/replace.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql"},"macro.dbt_snowflake.snowflake__get_replace_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {% if existing_relation.is_dynamic_table and target_relation.is_dynamic_table %}\n        {{ snowflake__get_replace_dynamic_table_sql(target_relation, sql) }}\n\n    {% else %}\n        {{ default__get_replace_sql(existing_relation, target_relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}","meta":{},"name":"snowflake__get_replace_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/relations/replace.sql","package_name":"dbt_snowflake","path":"macros/relations/replace.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__get_replace_sql"},"macro.dbt_snowflake.snowflake__get_replace_table_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__get_replace_table_sql(relation, sql) %}\n    {{ snowflake__create_table_as(False, relation, sql) }}\n{% endmacro %}","meta":{},"name":"snowflake__get_replace_table_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/relations/table/replace.sql","package_name":"dbt_snowflake","path":"macros/relations/table/replace.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__get_replace_table_sql"},"macro.dbt_snowflake.snowflake__get_replace_view_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__get_replace_view_sql(relation, sql) %}\n    {{ snowflake__create_view_as(relation, sql) }}\n{% endmacro %}","meta":{},"name":"snowflake__get_replace_view_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/relations/view/replace.sql","package_name":"dbt_snowflake","path":"macros/relations/view/replace.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__get_replace_view_sql"},"macro.dbt_snowflake.snowflake__insert_overwrite_get_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__insert_overwrite_get_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dml -%}\n\n    {%- set overwrite_columns = config.get('overwrite_columns', []) -%}\n\n    {{ config.get('sql_header', '') }}\n\n    {% set target_columns_list = '(' ~ ', '.join(overwrite_columns) ~ ')' if overwrite_columns else '' %}\n    {% set source_query_columns_list = ', '.join(overwrite_columns) if overwrite_columns else '*' %}\n    insert overwrite into {{ target.render() }} {{ target_columns_list }}\n        select {{ source_query_columns_list }}\n        from {{ source.render() }}\n\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}","meta":{},"name":"snowflake__insert_overwrite_get_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/materializations/incremental/insert_overwrite.sql","package_name":"dbt_snowflake","path":"macros/materializations/incremental/insert_overwrite.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__insert_overwrite_get_sql"},"macro.dbt_snowflake.snowflake__list_relations_without_caching":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__list_relations_without_caching(schema_relation, max_iter=10000, max_results_per_iter=10000) %}\n\n    {%- if schema_relation is string -%}\n        {%- set schema = schema_relation -%}\n    {%- else -%}\n        {%- set schema = schema_relation.include(identifier=False) -%}\n    {%- endif -%}\n\n    {%- set max_results_per_iter = adapter.config.flags.get('list_relations_per_page', max_results_per_iter) -%}\n    {%- set max_iter = adapter.config.flags.get('list_relations_page_limit', max_iter) -%}\n    {%- set too_many_relations_msg -%}\n        dbt is currently configured to list a maximum of {{ max_results_per_iter * max_iter }} objects per schema.\n        {{ schema }} exceeds this limit. If this is expected, you may configure this limit\n        by setting list_relations_per_page and list_relations_page_limit in your project flags.\n        It is recommended to start by increasing list_relations_page_limit.\n    {%- endset -%}\n\n    {%- set paginated_state = namespace(paginated_results=[], watermark=none) -%}\n\n    {%- do run_query('alter session set quoted_identifiers_ignore_case = false;') -%}\n\n    {#-\n        loop an extra time to catch the breach of max iterations\n        Note: while range is 0-based, loop.index starts at 1\n    -#}\n    {%- for _ in range(max_iter + 1) -%}\n\n        {#-\n            raise a warning and break if we still didn't exit and we're beyond the max iterations limit\n            Note: while range is 0-based, loop.index starts at 1\n        -#}\n        {%- if loop.index == max_iter + 1 -%}\n            {%- do exceptions.warn(too_many_relations_msg) -%}\n            {%- break -%}\n        {%- endif -%}\n\n        {%- set show_objects_sql = snowflake__show_objects_sql(schema, max_results_per_iter, paginated_state.watermark) -%}\n        {%- set paginated_result = run_query(show_objects_sql) -%}\n        {%- do paginated_state.paginated_results.append(paginated_result) -%}\n        {%- set paginated_state.watermark = paginated_result.columns.get('name').values()[-1] -%}\n\n        {#- we got less results than the max_results_per_iter (includes 0), meaning we reached the end -#}\n        {%- if (paginated_result | length) < max_results_per_iter -%}\n            {%- break -%}\n        {%- endif -%}\n\n    {%- endfor -%}\n\n    {%- do run_query('alter session unset quoted_identifiers_ignore_case;') -%}\n\n    {#- grab the first table in the paginated results to access the `merge` method -#}\n    {%- set agate_table = paginated_state.paginated_results[0] -%}\n    {%- do return(agate_table.merge(paginated_state.paginated_results)) -%}\n\n{% endmacro %}","meta":{},"name":"snowflake__list_relations_without_caching","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/metadata/list_relations_without_caching.sql","package_name":"dbt_snowflake","path":"macros/metadata/list_relations_without_caching.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__list_relations_without_caching"},"macro.dbt_snowflake.snowflake__list_schemas":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}","meta":{},"name":"snowflake__list_schemas","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/adapters.sql","package_name":"dbt_snowflake","path":"macros/adapters.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__list_schemas"},"macro.dbt_snowflake.snowflake__load_csv_rows":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}","meta":{},"name":"snowflake__load_csv_rows","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/materializations/seed.sql","package_name":"dbt_snowflake","path":"macros/materializations/seed.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__load_csv_rows"},"macro.dbt_snowflake.snowflake__refresh_dynamic_table":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__refresh_dynamic_table(relation) -%}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n\n    alter dynamic table {{ relation }} refresh\n{%- endmacro %}","meta":{},"name":"snowflake__refresh_dynamic_table","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/relations/dynamic_table/refresh.sql","package_name":"dbt_snowflake","path":"macros/relations/dynamic_table/refresh.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__refresh_dynamic_table"},"macro.dbt_snowflake.snowflake__rename_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}","meta":{},"name":"snowflake__rename_relation","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/relations/rename.sql","package_name":"dbt_snowflake","path":"macros/relations/rename.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__rename_relation"},"macro.dbt_snowflake.snowflake__right":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}","meta":{},"name":"snowflake__right","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/utils/right.sql","package_name":"dbt_snowflake","path":"macros/utils/right.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__right"},"macro.dbt_snowflake.snowflake__safe_cast":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__safe_cast(field, type) %}\n    {% if type|upper == \"GEOMETRY\" -%}\n        try_to_geometry({{field}})\n    {% elif type|upper == \"GEOGRAPHY\" -%}\n        try_to_geography({{field}})\n    {% elif type|upper != \"VARIANT\" -%}\n        {#-- Snowflake try_cast does not support casting to variant, and expects the field as a string --#}\n        {% set field_as_string =  dbt.string_literal(field) if field is number else field %}\n        try_cast({{field_as_string}} as {{type}})\n    {% else -%}\n        {{ adapter.dispatch('cast', 'dbt')(field, type) }}\n    {% endif -%}\n{% endmacro %}","meta":{},"name":"snowflake__safe_cast","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/utils/safe_cast.sql","package_name":"dbt_snowflake","path":"macros/utils/safe_cast.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__safe_cast"},"macro.dbt_snowflake.snowflake__set_query_tag":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}","meta":{},"name":"snowflake__set_query_tag","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/adapters.sql","package_name":"dbt_snowflake","path":"macros/adapters.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__set_query_tag"},"macro.dbt_snowflake.snowflake__show_object_metadata":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__show_object_metadata(relation) %}\n  {%- set sql -%}\n    show objects in {{ relation.include(identifier=False) }} starts with '{{ relation.identifier }}' limit 1\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {{ return(result) }}\n{% endmacro %}","meta":{},"name":"snowflake__show_object_metadata","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/adapters.sql","package_name":"dbt_snowflake","path":"macros/adapters.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__show_object_metadata"},"macro.dbt_snowflake.snowflake__show_objects_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__show_objects_sql(schema, max_results_per_iter=10000, watermark=none) %}\n\n{%- set _sql -%}\nshow objects in {{ schema }}\n    limit {{ max_results_per_iter }}\n    {% if watermark is not none -%} from '{{ watermark }}' {%- endif %}\n;\n{%- endset -%}\n\n{%- do return(_sql) -%}\n\n{% endmacro %}","meta":{},"name":"snowflake__show_objects_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/metadata/list_relations_without_caching.sql","package_name":"dbt_snowflake","path":"macros/metadata/list_relations_without_caching.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__show_objects_sql"},"macro.dbt_snowflake.snowflake__snapshot_get_time":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}","meta":{},"name":"snowflake__snapshot_get_time","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/utils/timestamps.sql","package_name":"dbt_snowflake","path":"macros/utils/timestamps.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__snapshot_get_time"},"macro.dbt_snowflake.snowflake__snapshot_merge_sql":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}","meta":{},"name":"snowflake__snapshot_merge_sql","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/materializations/incremental/merge.sql","package_name":"dbt_snowflake","path":"macros/materializations/incremental/merge.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__snapshot_merge_sql"},"macro.dbt_snowflake.snowflake__snapshot_string_as_time":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}","meta":{},"name":"snowflake__snapshot_string_as_time","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/utils/timestamps.sql","package_name":"dbt_snowflake","path":"macros/utils/timestamps.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__snapshot_string_as_time"},"macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement":{"depends_on":{"macros":[]},"description":"","macro_sql":"{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}","meta":{},"name":"snowflake__support_multiple_grantees_per_dcl_statement","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/apply_grants.sql","package_name":"dbt_snowflake","path":"macros/apply_grants.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"},"macro.dbt_snowflake.snowflake__truncate_relation":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation.render() }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}","meta":{},"name":"snowflake__truncate_relation","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/adapters.sql","package_name":"dbt_snowflake","path":"macros/adapters.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__truncate_relation"},"macro.dbt_snowflake.snowflake__unset_query_tag":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}","meta":{},"name":"snowflake__unset_query_tag","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/adapters.sql","package_name":"dbt_snowflake","path":"macros/adapters.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake__unset_query_tag"},"macro.dbt_snowflake.snowflake_dml_explicit_transaction":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}","meta":{},"name":"snowflake_dml_explicit_transaction","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/adapters.sql","package_name":"dbt_snowflake","path":"macros/adapters.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.snowflake_dml_explicit_transaction"},"macro.dbt_snowflake.unset_query_tag":{"depends_on":{"macros":[]},"description":"","macro_sql":"{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}","meta":{},"name":"unset_query_tag","original_file_path":"dbt_internal_packages/dbt-snowflake/macros/adapters.sql","package_name":"dbt_snowflake","path":"macros/adapters.sql","resource_type":"macro","unique_id":"macro.dbt_snowflake.unset_query_tag"}},"metadata":{"adapter_type":"snowflake","dbt_schema_version":"https://schemas.getdbt.com/dbt/manifest/v20.json","dbt_version":"2.0.0-beta.46","env":{},"generated_at":"2025-08-01T18:25:59.175099Z","invocation_id":"2dc2ba61-37b0-4ab7-91e7-c0bde90cdaff","invocation_started_at":null,"project_id":null,"project_name":"pharma_cmc_quality","quoting":null,"send_anonymous_usage_stats":null,"user_id":null},"metrics":{},"nodes":{"model.pharma_cmc_quality.dim_lots":{"alias":"dim_lots","checksum":{"checksum":"f0c705d8d7ef325078c163329d8c9fae0a049cd852f9578b0880d2367720f7f3","name":"SHA256"},"columns":{"EXPIRY_DATE":{"config":{},"constraints":[],"data_type":"DATE","meta":{},"name":"EXPIRY_DATE","tags":[]},"LOT_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"LOT_ID","tags":[]},"LOT_NUMBER":{"config":{},"constraints":[],"data_type":"VARCHAR","meta":{},"name":"LOT_NUMBER","tags":[]},"LOT_STATUS":{"config":{},"constraints":[],"data_type":"VARCHAR","meta":{},"name":"LOT_STATUS","tags":[]},"MANUFACTURE_DATE":{"config":{},"constraints":[],"data_type":"DATE","meta":{},"name":"MANUFACTURE_DATE","tags":[]},"MATERIAL_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"MATERIAL_ID","tags":[]},"PRODUCT_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"PRODUCT_ID","tags":[]}},"compiled":true,"compiled_code":"-- This model creates the dimension table for lots.\nselect\n    lot_id,\n    lot_number,\n    product_id,\n    material_id,\n    manufacture_date,\n    expiry_date,\n    lot_status\nfrom JHALL_SANDBOX.RAW_pqcmc_staging.stg_lots;","compiled_path":"target/compiled/models/marts/dim_lots.sql","config":{"access":null,"alias":null,"auto_refresh":null,"backup":null,"batch_size":null,"begin":null,"bind":null,"catalog_name":null,"column_types":null,"concurrent_batches":null,"contract":null,"database":null,"docs":null,"enabled":true,"event_time":null,"freshness":null,"full_refresh":null,"grants":null,"group":null,"incremental_predicates":null,"incremental_strategy":null,"location":null,"lookback":null,"materialized":"table","merge_exclude_columns":null,"merge_update_columns":null,"meta":null,"on_configuration_change":null,"on_schema_change":null,"packages":null,"persist_docs":null,"post_hook":null,"pre_hook":null,"predicates":null,"quoting":{"database":false,"identifier":false,"schema":false},"schema":"pqcmc_analytics","sql_header":null,"static_analysis":null,"table_format":null,"tags":["marts"],"unique_key":null},"constraints":[],"contract":{"alias_types":false,"enforced":false},"database":"JHALL_SANDBOX","depends_on":{"macros":[],"nodes":["model.pharma_cmc_quality.stg_lots"],"nodes_with_ref_location":[["model.pharma_cmc_quality.stg_lots",{"col":6,"expanded":null,"file":"models/marts/dim_lots.sql","index":179,"line":10}]]},"fqn":["pharma_cmc_quality","marts","dim_lots"],"language":"sql","metrics":[],"name":"dim_lots","original_file_path":"models/marts/dim_lots.sql","package_name":"pharma_cmc_quality","path":"models/marts/dim_lots.sql","primary_key":[],"raw_code":"--placeholder--","refs":[{"name":"stg_lots"}],"relation_name":"JHALL_SANDBOX.RAW_pqcmc_analytics.dim_lots","resource_type":"model","schema":"RAW_pqcmc_analytics","sources":[],"unique_id":"model.pharma_cmc_quality.dim_lots","unrendered_config":{}},"model.pharma_cmc_quality.dim_materials":{"alias":"dim_materials","checksum":{"checksum":"05072061f0c25cce1695ca8d5c6b108bf949f83894260da1262ad4c27b106027","name":"SHA256"},"columns":{"MATERIAL_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"MATERIAL_ID","tags":[]},"MATERIAL_NAME":{"config":{},"constraints":[],"data_type":"VARCHAR","meta":{},"name":"MATERIAL_NAME","tags":[]},"MATERIAL_TYPE":{"config":{},"constraints":[],"data_type":"VARCHAR","meta":{},"name":"MATERIAL_TYPE","tags":[]},"SUPPLIER_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"SUPPLIER_ID","tags":[]}},"compiled":true,"compiled_code":"-- This model creates the dimension table for materials.\nselect\n    material_id,\n    material_name,\n    material_type,\n    supplier_id\nfrom JHALL_SANDBOX.RAW_pqcmc_staging.stg_materials;","compiled_path":"target/compiled/models/marts/dim_materials.sql","config":{"access":null,"alias":null,"auto_refresh":null,"backup":null,"batch_size":null,"begin":null,"bind":null,"catalog_name":null,"column_types":null,"concurrent_batches":null,"contract":null,"database":null,"docs":null,"enabled":true,"event_time":null,"freshness":null,"full_refresh":null,"grants":null,"group":null,"incremental_predicates":null,"incremental_strategy":null,"location":null,"lookback":null,"materialized":"table","merge_exclude_columns":null,"merge_update_columns":null,"meta":null,"on_configuration_change":null,"on_schema_change":null,"packages":null,"persist_docs":null,"post_hook":null,"pre_hook":null,"predicates":null,"quoting":{"database":false,"identifier":false,"schema":false},"schema":"pqcmc_analytics","sql_header":null,"static_analysis":null,"table_format":null,"tags":["marts"],"unique_key":null},"constraints":[],"contract":{"alias_types":false,"enforced":false},"database":"JHALL_SANDBOX","depends_on":{"macros":[],"nodes":["model.pharma_cmc_quality.stg_materials"],"nodes_with_ref_location":[["model.pharma_cmc_quality.stg_materials",{"col":6,"expanded":null,"file":"models/marts/dim_materials.sql","index":140,"line":7}]]},"fqn":["pharma_cmc_quality","marts","dim_materials"],"language":"sql","metrics":[],"name":"dim_materials","original_file_path":"models/marts/dim_materials.sql","package_name":"pharma_cmc_quality","path":"models/marts/dim_materials.sql","primary_key":[],"raw_code":"--placeholder--","refs":[{"name":"stg_materials"}],"relation_name":"JHALL_SANDBOX.RAW_pqcmc_analytics.dim_materials","resource_type":"model","schema":"RAW_pqcmc_analytics","sources":[],"unique_id":"model.pharma_cmc_quality.dim_materials","unrendered_config":{}},"model.pharma_cmc_quality.dim_products":{"alias":"dim_products","checksum":{"checksum":"2b19b9f97c08e988e3628212489867c84f8e27d02ad12794be78fd13b5f6b7d6","name":"SHA256"},"columns":{"DOSAGE_FORM":{"config":{},"constraints":[],"data_type":"VARCHAR","meta":{},"name":"DOSAGE_FORM","tags":[]},"PRODUCT_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"PRODUCT_ID","tags":[]},"PRODUCT_NAME":{"config":{},"constraints":[],"data_type":"VARCHAR","meta":{},"name":"PRODUCT_NAME","tags":[]},"STRENGTH":{"config":{},"constraints":[],"data_type":"VARCHAR","meta":{},"name":"STRENGTH","tags":[]}},"compiled":true,"compiled_code":"-- This model creates the dimension table for products.\nselect\n    product_id,\n    product_name,\n    dosage_form,\n    strength\nfrom JHALL_SANDBOX.RAW_pqcmc_staging.stg_products;","compiled_path":"target/compiled/models/marts/dim_products.sql","config":{"access":null,"alias":null,"auto_refresh":null,"backup":null,"batch_size":null,"begin":null,"bind":null,"catalog_name":null,"column_types":null,"concurrent_batches":null,"contract":null,"database":null,"docs":null,"enabled":true,"event_time":null,"freshness":null,"full_refresh":null,"grants":null,"group":null,"incremental_predicates":null,"incremental_strategy":null,"location":null,"lookback":null,"materialized":"table","merge_exclude_columns":null,"merge_update_columns":null,"meta":null,"on_configuration_change":null,"on_schema_change":null,"packages":null,"persist_docs":null,"post_hook":null,"pre_hook":null,"predicates":null,"quoting":{"database":false,"identifier":false,"schema":false},"schema":"pqcmc_analytics","sql_header":null,"static_analysis":null,"table_format":null,"tags":["marts"],"unique_key":null},"constraints":[],"contract":{"alias_types":false,"enforced":false},"database":"JHALL_SANDBOX","depends_on":{"macros":[],"nodes":["model.pharma_cmc_quality.stg_products"],"nodes_with_ref_location":[["model.pharma_cmc_quality.stg_products",{"col":6,"expanded":null,"file":"models/marts/dim_products.sql","index":132,"line":7}]]},"fqn":["pharma_cmc_quality","marts","dim_products"],"language":"sql","metrics":[],"name":"dim_products","original_file_path":"models/marts/dim_products.sql","package_name":"pharma_cmc_quality","path":"models/marts/dim_products.sql","primary_key":[],"raw_code":"--placeholder--","refs":[{"name":"stg_products"}],"relation_name":"JHALL_SANDBOX.RAW_pqcmc_analytics.dim_products","resource_type":"model","schema":"RAW_pqcmc_analytics","sources":[],"unique_id":"model.pharma_cmc_quality.dim_products","unrendered_config":{}},"model.pharma_cmc_quality.dim_specifications":{"alias":"dim_specifications","checksum":{"checksum":"b5c2c0ae131e8015b8645a95c2b1fe47616cb695b67f293f41cceb4239ba554d","name":"SHA256"},"columns":{"ACCEPTANCE_CRITERIA":{"config":{},"constraints":[],"data_type":"VARCHAR","meta":{},"name":"ACCEPTANCE_CRITERIA","tags":[]},"EFFECTIVE_DATE":{"config":{},"constraints":[],"data_type":"DATE","meta":{},"name":"EFFECTIVE_DATE","tags":[]},"SPEC_FOR_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"SPEC_FOR_ID","tags":[]},"SPEC_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"SPEC_ID","tags":[]},"SPEC_TEST_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"SPEC_TEST_ID","tags":[]},"SPEC_VERSION":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"SPEC_VERSION","tags":[]},"TEST_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"TEST_ID","tags":[]},"TEST_NAME":{"config":{},"constraints":[],"data_type":"VARCHAR","meta":{},"name":"TEST_NAME","tags":[]}},"compiled":true,"compiled_code":"-- This model creates a comprehensive specification dimension,\n-- joining tests and their criteria.\nwith specs as (\n    select * from JHALL_SANDBOX.RAW_pqcmc_staging.stg_specifications\n),\nspec_tests as (\n    select * from JHALL_SANDBOX.RAW_pqcmc_staging.stg_specification_tests\n),\ntests as (\n    select * from JHALL_SANDBOX.RAW_pqcmc_staging.stg_tests\n)\n\nselect\n    st.spec_test_id,\n    s.spec_id,\n    s.spec_for_id,\n    s.spec_version,\n    s.effective_date,\n    t.test_id,\n    t.test_name,\n    st.acceptance_criteria\nfrom spec_tests st\nleft join specs s on st.spec_id = s.spec_id\nleft join tests t on st.test_id = t.test_id;","compiled_path":"target/compiled/models/marts/dim_specifications.sql","config":{"access":null,"alias":null,"auto_refresh":null,"backup":null,"batch_size":null,"begin":null,"bind":null,"catalog_name":null,"column_types":null,"concurrent_batches":null,"contract":null,"database":null,"docs":null,"enabled":true,"event_time":null,"freshness":null,"full_refresh":null,"grants":null,"group":null,"incremental_predicates":null,"incremental_strategy":null,"location":null,"lookback":null,"materialized":"table","merge_exclude_columns":null,"merge_update_columns":null,"meta":null,"on_configuration_change":null,"on_schema_change":null,"packages":null,"persist_docs":null,"post_hook":null,"pre_hook":null,"predicates":null,"quoting":{"database":false,"identifier":false,"schema":false},"schema":"pqcmc_analytics","sql_header":null,"static_analysis":null,"table_format":null,"tags":["marts"],"unique_key":null},"constraints":[],"contract":{"alias_types":false,"enforced":false},"database":"JHALL_SANDBOX","depends_on":{"macros":[],"nodes":["model.pharma_cmc_quality.stg_specifications","model.pharma_cmc_quality.stg_specification_tests","model.pharma_cmc_quality.stg_tests"],"nodes_with_ref_location":[["model.pharma_cmc_quality.stg_specifications",{"col":19,"expanded":null,"file":"models/marts/dim_specifications.sql","index":134,"line":4}],["model.pharma_cmc_quality.stg_specification_tests",{"col":19,"expanded":null,"file":"models/marts/dim_specifications.sql","index":203,"line":7}],["model.pharma_cmc_quality.stg_tests",{"col":19,"expanded":null,"file":"models/marts/dim_specifications.sql","index":272,"line":10}]]},"fqn":["pharma_cmc_quality","marts","dim_specifications"],"language":"sql","metrics":[],"name":"dim_specifications","original_file_path":"models/marts/dim_specifications.sql","package_name":"pharma_cmc_quality","path":"models/marts/dim_specifications.sql","primary_key":[],"raw_code":"--placeholder--","refs":[{"name":"stg_specifications"},{"name":"stg_specification_tests"},{"name":"stg_tests"}],"relation_name":"JHALL_SANDBOX.RAW_pqcmc_analytics.dim_specifications","resource_type":"model","schema":"RAW_pqcmc_analytics","sources":[],"unique_id":"model.pharma_cmc_quality.dim_specifications","unrendered_config":{}},"model.pharma_cmc_quality.dim_tests":{"alias":"dim_tests","checksum":{"checksum":"fb1955c110f9ab6515f39287a366b3791ba2300b6da064602525f2062d91b420","name":"SHA256"},"columns":{"TEST_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"TEST_ID","tags":[]},"TEST_METHOD_DOCUMENT":{"config":{},"constraints":[],"data_type":"VARCHAR","meta":{},"name":"TEST_METHOD_DOCUMENT","tags":[]},"TEST_NAME":{"config":{},"constraints":[],"data_type":"VARCHAR","meta":{},"name":"TEST_NAME","tags":[]}},"compiled":true,"compiled_code":"-- This model creates the dimension table for tests.\nselect\n    test_id,\n    test_name,\n    test_method_document\nfrom JHALL_SANDBOX.RAW_pqcmc_staging.stg_tests;","compiled_path":"target/compiled/models/marts/dim_tests.sql","config":{"access":null,"alias":null,"auto_refresh":null,"backup":null,"batch_size":null,"begin":null,"bind":null,"catalog_name":null,"column_types":null,"concurrent_batches":null,"contract":null,"database":null,"docs":null,"enabled":true,"event_time":null,"freshness":null,"full_refresh":null,"grants":null,"group":null,"incremental_predicates":null,"incremental_strategy":null,"location":null,"lookback":null,"materialized":"table","merge_exclude_columns":null,"merge_update_columns":null,"meta":null,"on_configuration_change":null,"on_schema_change":null,"packages":null,"persist_docs":null,"post_hook":null,"pre_hook":null,"predicates":null,"quoting":{"database":false,"identifier":false,"schema":false},"schema":"pqcmc_analytics","sql_header":null,"static_analysis":null,"table_format":null,"tags":["marts"],"unique_key":null},"constraints":[],"contract":{"alias_types":false,"enforced":false},"database":"JHALL_SANDBOX","depends_on":{"macros":[],"nodes":["model.pharma_cmc_quality.stg_tests"],"nodes_with_ref_location":[["model.pharma_cmc_quality.stg_tests",{"col":6,"expanded":null,"file":"models/marts/dim_tests.sql","index":118,"line":6}]]},"fqn":["pharma_cmc_quality","marts","dim_tests"],"language":"sql","metrics":[],"name":"dim_tests","original_file_path":"models/marts/dim_tests.sql","package_name":"pharma_cmc_quality","path":"models/marts/dim_tests.sql","primary_key":[],"raw_code":"--placeholder--","refs":[{"name":"stg_tests"}],"relation_name":"JHALL_SANDBOX.RAW_pqcmc_analytics.dim_tests","resource_type":"model","schema":"RAW_pqcmc_analytics","sources":[],"unique_id":"model.pharma_cmc_quality.dim_tests","unrendered_config":{}},"model.pharma_cmc_quality.fct_stability_results":{"alias":"fct_stability_results","checksum":{"checksum":"538cb75ddd9ac2f5803080776985b99916af30586c2372db9b115465e0326eb8","name":"SHA256"},"columns":{"LOT_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"LOT_ID","tags":[]},"PRODUCT_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"PRODUCT_ID","tags":[]},"PULL_DATE":{"config":{},"constraints":[],"data_type":"VARCHAR","meta":{},"name":"PULL_DATE","tags":[]},"RESULT_VALUE":{"config":{},"constraints":[],"data_type":"VARCHAR","meta":{},"name":"RESULT_VALUE","tags":[]},"STABILITY_RESULT_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"STABILITY_RESULT_ID","tags":[]},"STORAGE_CONDITION":{"config":{},"constraints":[],"data_type":"VARCHAR","meta":{},"name":"STORAGE_CONDITION","tags":[]},"STUDY_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"STUDY_ID","tags":[]},"STUDY_START_DATE":{"config":{},"constraints":[],"data_type":"DATE","meta":{},"name":"STUDY_START_DATE","tags":[]},"TESTED_AT_UTC":{"config":{},"constraints":[],"data_type":"TIMESTAMP_NTZ(9)","meta":{},"name":"TESTED_AT_UTC","tags":[]},"TEST_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"TEST_ID","tags":[]},"TIMEPOINT":{"config":{},"constraints":[],"data_type":"VARCHAR","meta":{},"name":"TIMEPOINT","tags":[]}},"compiled":true,"compiled_code":"-- This model creates the fact table for stability results.\nwith stability_studies as (\n    select * from JHALL_SANDBOX.RAW_pqcmc_staging.stg_stability_studies\n),\nstability_results as (\n    select * from JHALL_SANDBOX.RAW_pqcmc_staging.stg_stability_results\n)\n\nselect\n    -- Primary Key\n    sr.stability_result_id,\n\n    -- Foreign Keys\n    sr.study_id,\n    sr.lot_id,\n    sr.test_id,\n    ss.product_id,\n\n    -- Measures\n    sr.result_value,\n    \n    -- Degenerate Dimensions\n    sr.storage_condition,\n    sr.timepoint,\n    \n    -- Timestamps\n    sr.pull_date,\n    sr.tested_at_utc,\n    ss.study_start_date\n    \nfrom stability_results sr\nleft join stability_studies ss on sr.study_id = ss.study_id;","compiled_path":"target/compiled/models/marts/fct_stability_results.sql","config":{"access":null,"alias":null,"auto_refresh":null,"backup":null,"batch_size":null,"begin":null,"bind":null,"catalog_name":null,"column_types":null,"concurrent_batches":null,"contract":null,"database":null,"docs":null,"enabled":true,"event_time":null,"freshness":null,"full_refresh":null,"grants":null,"group":null,"incremental_predicates":null,"incremental_strategy":null,"location":null,"lookback":null,"materialized":"table","merge_exclude_columns":null,"merge_update_columns":null,"meta":null,"on_configuration_change":null,"on_schema_change":null,"packages":null,"persist_docs":null,"post_hook":null,"pre_hook":null,"predicates":null,"quoting":{"database":false,"identifier":false,"schema":false},"schema":"pqcmc_analytics","sql_header":null,"static_analysis":null,"table_format":null,"tags":["marts"],"unique_key":null},"constraints":[],"contract":{"alias_types":false,"enforced":false},"database":"JHALL_SANDBOX","depends_on":{"macros":[],"nodes":["model.pharma_cmc_quality.stg_stability_studies","model.pharma_cmc_quality.stg_stability_results"],"nodes_with_ref_location":[["model.pharma_cmc_quality.stg_stability_studies",{"col":19,"expanded":null,"file":"models/marts/fct_stability_results.sql","index":106,"line":3}],["model.pharma_cmc_quality.stg_stability_results",{"col":19,"expanded":null,"file":"models/marts/fct_stability_results.sql","index":185,"line":6}]]},"fqn":["pharma_cmc_quality","marts","fct_stability_results"],"language":"sql","metrics":[],"name":"fct_stability_results","original_file_path":"models/marts/fct_stability_results.sql","package_name":"pharma_cmc_quality","path":"models/marts/fct_stability_results.sql","primary_key":[],"raw_code":"--placeholder--","refs":[{"name":"stg_stability_studies"},{"name":"stg_stability_results"}],"relation_name":"JHALL_SANDBOX.RAW_pqcmc_analytics.fct_stability_results","resource_type":"model","schema":"RAW_pqcmc_analytics","sources":[],"unique_id":"model.pharma_cmc_quality.fct_stability_results","unrendered_config":{}},"model.pharma_cmc_quality.fct_test_results":{"alias":"fct_test_results","checksum":{"checksum":"530778574bad24fdfc8863c275c268ef493ce00ce0e554881dc6c8f38da4ac79","name":"SHA256"},"columns":{"LOT_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"LOT_ID","tags":[]},"RESULT_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"RESULT_ID","tags":[]},"RESULT_STATUS":{"config":{},"constraints":[],"data_type":"VARCHAR","meta":{},"name":"RESULT_STATUS","tags":[]},"RESULT_VALUE":{"config":{},"constraints":[],"data_type":"VARCHAR","meta":{},"name":"RESULT_VALUE","tags":[]},"SPEC_TEST_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"SPEC_TEST_ID","tags":[]},"TESTED_AT_UTC":{"config":{},"constraints":[],"data_type":"TIMESTAMP_NTZ(9)","meta":{},"name":"TESTED_AT_UTC","tags":[]}},"compiled":true,"compiled_code":"-- This model creates the fact table for lot test results.\nselect\n    -- Primary Key\n    result_id,\n\n    -- Foreign Keys\n    lot_id,\n    spec_test_id,\n\n    -- Measures\n    result_value,\n    \n    -- Degenerate Dimension\n    result_status,\n    \n    -- Timestamps\n    tested_at_utc\nfrom JHALL_SANDBOX.RAW_pqcmc_staging.stg_test_results;","compiled_path":"target/compiled/models/marts/fct_test_results.sql","config":{"access":null,"alias":null,"auto_refresh":null,"backup":null,"batch_size":null,"begin":null,"bind":null,"catalog_name":null,"column_types":null,"concurrent_batches":null,"contract":null,"database":null,"docs":null,"enabled":true,"event_time":null,"freshness":null,"full_refresh":null,"grants":null,"group":null,"incremental_predicates":null,"incremental_strategy":null,"location":null,"lookback":null,"materialized":"table","merge_exclude_columns":null,"merge_update_columns":null,"meta":null,"on_configuration_change":null,"on_schema_change":null,"packages":null,"persist_docs":null,"post_hook":null,"pre_hook":null,"predicates":null,"quoting":{"database":false,"identifier":false,"schema":false},"schema":"pqcmc_analytics","sql_header":null,"static_analysis":null,"table_format":null,"tags":["marts"],"unique_key":null},"constraints":[],"contract":{"alias_types":false,"enforced":false},"database":"JHALL_SANDBOX","depends_on":{"macros":[],"nodes":["model.pharma_cmc_quality.stg_test_results"],"nodes_with_ref_location":[["model.pharma_cmc_quality.stg_test_results",{"col":6,"expanded":null,"file":"models/marts/fct_test_results.sql","index":284,"line":18}]]},"fqn":["pharma_cmc_quality","marts","fct_test_results"],"language":"sql","metrics":[],"name":"fct_test_results","original_file_path":"models/marts/fct_test_results.sql","package_name":"pharma_cmc_quality","path":"models/marts/fct_test_results.sql","primary_key":[],"raw_code":"--placeholder--","refs":[{"name":"stg_test_results"}],"relation_name":"JHALL_SANDBOX.RAW_pqcmc_analytics.fct_test_results","resource_type":"model","schema":"RAW_pqcmc_analytics","sources":[],"unique_id":"model.pharma_cmc_quality.fct_test_results","unrendered_config":{}},"model.pharma_cmc_quality.stg_lots":{"alias":"stg_lots","checksum":{"checksum":"8f1b134209ed427a1ea0295cca90023786b76c8222f168d79c7bae7b9ba1ac13","name":"SHA256"},"columns":{"CREATED_AT_UTC":{"config":{},"constraints":[],"data_type":"TIMESTAMP_NTZ(9)","meta":{},"name":"CREATED_AT_UTC","tags":[]},"EXPIRY_DATE":{"config":{},"constraints":[],"data_type":"DATE","meta":{},"name":"EXPIRY_DATE","tags":[]},"LOT_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"LOT_ID","tags":[]},"LOT_NUMBER":{"config":{},"constraints":[],"data_type":"VARCHAR","meta":{},"name":"LOT_NUMBER","tags":[]},"LOT_STATUS":{"config":{},"constraints":[],"data_type":"VARCHAR","meta":{},"name":"LOT_STATUS","tags":[]},"MANUFACTURE_DATE":{"config":{},"constraints":[],"data_type":"DATE","meta":{},"name":"MANUFACTURE_DATE","tags":[]},"MATERIAL_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"MATERIAL_ID","tags":[]},"PRODUCT_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"PRODUCT_ID","tags":[]}},"compiled":true,"compiled_code":"\n-- This model performs basic cleaning and renaming of the raw lots table.\nwith source as (\n\n    select * from JHALL_SANDBOX.PQCMC_RAW.lots\n\n),\n\nrenamed as (\n\n    select\n        -- Primary Key\n        lot_id,\n\n        -- Foreign Keys\n        product_id,\n        material_id,\n\n        -- Attributes\n        lot_number,\n        status as lot_status,\n\n        -- Timestamps\n        manufacture_date,\n        expiry_date,\n        created_at as created_at_utc\n\n    from source\n\n)\n\nselect * from renamed;","compiled_path":"target/compiled/models/staging/stg_lots.sql","config":{"access":null,"alias":null,"auto_refresh":null,"backup":null,"batch_size":null,"begin":null,"bind":null,"catalog_name":null,"column_types":null,"concurrent_batches":null,"contract":null,"database":null,"docs":null,"enabled":true,"event_time":null,"freshness":null,"full_refresh":null,"grants":null,"group":null,"incremental_predicates":null,"incremental_strategy":null,"location":null,"lookback":null,"materialized":"view","merge_exclude_columns":null,"merge_update_columns":null,"meta":null,"on_configuration_change":null,"on_schema_change":null,"packages":null,"persist_docs":null,"post_hook":null,"pre_hook":null,"predicates":null,"quoting":{"database":false,"identifier":false,"schema":false},"schema":"pqcmc_staging","sql_header":null,"static_analysis":null,"table_format":null,"tags":["staging"],"unique_key":null},"constraints":[],"contract":{"alias_types":false,"enforced":false},"database":"JHALL_SANDBOX","depends_on":{"macros":[],"nodes":["source.pharma_cmc_quality.raw_quality_system.lots"],"nodes_with_ref_location":[["source.pharma_cmc_quality.raw_quality_system.lots",{"col":19,"expanded":null,"file":"models/staging/stg_lots.sql","index":111,"line":5}]]},"fqn":["pharma_cmc_quality","staging","stg_lots"],"language":"sql","metrics":[],"name":"stg_lots","original_file_path":"models/staging/stg_lots.sql","package_name":"pharma_cmc_quality","path":"models/staging/stg_lots.sql","primary_key":[],"raw_code":"--placeholder--","refs":[],"relation_name":"JHALL_SANDBOX.RAW_pqcmc_staging.stg_lots","resource_type":"model","schema":"RAW_pqcmc_staging","sources":[["raw_quality_system","lots"]],"unique_id":"model.pharma_cmc_quality.stg_lots","unrendered_config":{}},"model.pharma_cmc_quality.stg_materials":{"alias":"stg_materials","checksum":{"checksum":"a72183d2b8da550aebda762b25e6710600121bbbc7779dfe5c89df0999052678","name":"SHA256"},"columns":{"CREATED_AT_UTC":{"config":{},"constraints":[],"data_type":"TIMESTAMP_NTZ(9)","meta":{},"name":"CREATED_AT_UTC","tags":[]},"MATERIAL_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"MATERIAL_ID","tags":[]},"MATERIAL_NAME":{"config":{},"constraints":[],"data_type":"VARCHAR","meta":{},"name":"MATERIAL_NAME","tags":[]},"MATERIAL_TYPE":{"config":{},"constraints":[],"data_type":"VARCHAR","meta":{},"name":"MATERIAL_TYPE","tags":[]},"SUPPLIER_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"SUPPLIER_ID","tags":[]},"UPDATED_AT_UTC":{"config":{},"constraints":[],"data_type":"TIMESTAMP_NTZ(9)","meta":{},"name":"UPDATED_AT_UTC","tags":[]}},"compiled":true,"compiled_code":"\n-- This model performs basic cleaning and renaming of the raw materials table.\nwith source as (\n\n    select * from JHALL_SANDBOX.PQCMC_RAW.materials\n\n),\n\nrenamed as (\n\n    select\n        -- Primary Key\n        material_id,\n\n        -- Attributes\n        material_name,\n        material_type,\n        supplier_id,\n\n        -- Timestamps\n        created_at as created_at_utc,\n        updated_at as updated_at_utc\n\n    from source\n\n)\n\nselect * from renamed;","compiled_path":"target/compiled/models/staging/stg_materials.sql","config":{"access":null,"alias":null,"auto_refresh":null,"backup":null,"batch_size":null,"begin":null,"bind":null,"catalog_name":null,"column_types":null,"concurrent_batches":null,"contract":null,"database":null,"docs":null,"enabled":true,"event_time":null,"freshness":null,"full_refresh":null,"grants":null,"group":null,"incremental_predicates":null,"incremental_strategy":null,"location":null,"lookback":null,"materialized":"view","merge_exclude_columns":null,"merge_update_columns":null,"meta":null,"on_configuration_change":null,"on_schema_change":null,"packages":null,"persist_docs":null,"post_hook":null,"pre_hook":null,"predicates":null,"quoting":{"database":false,"identifier":false,"schema":false},"schema":"pqcmc_staging","sql_header":null,"static_analysis":null,"table_format":null,"tags":["staging"],"unique_key":null},"constraints":[],"contract":{"alias_types":false,"enforced":false},"database":"JHALL_SANDBOX","depends_on":{"macros":[],"nodes":["source.pharma_cmc_quality.raw_quality_system.materials"],"nodes_with_ref_location":[["source.pharma_cmc_quality.raw_quality_system.materials",{"col":19,"expanded":null,"file":"models/staging/stg_materials.sql","index":116,"line":5}]]},"fqn":["pharma_cmc_quality","staging","stg_materials"],"language":"sql","metrics":[],"name":"stg_materials","original_file_path":"models/staging/stg_materials.sql","package_name":"pharma_cmc_quality","path":"models/staging/stg_materials.sql","primary_key":[],"raw_code":"--placeholder--","refs":[],"relation_name":"JHALL_SANDBOX.RAW_pqcmc_staging.stg_materials","resource_type":"model","schema":"RAW_pqcmc_staging","sources":[["raw_quality_system","materials"]],"unique_id":"model.pharma_cmc_quality.stg_materials","unrendered_config":{}},"model.pharma_cmc_quality.stg_products":{"alias":"stg_products","checksum":{"checksum":"9a6bab2ea81bc1980b81557eb04eb002c8eab03aabc7b253062703282c8ece62","name":"SHA256"},"columns":{"CREATED_AT_UTC":{"config":{},"constraints":[],"data_type":"TIMESTAMP_NTZ(9)","meta":{},"name":"CREATED_AT_UTC","tags":[]},"DOSAGE_FORM":{"config":{},"constraints":[],"data_type":"VARCHAR","meta":{},"name":"DOSAGE_FORM","tags":[]},"PRODUCT_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"PRODUCT_ID","tags":[]},"PRODUCT_NAME":{"config":{},"constraints":[],"data_type":"VARCHAR","meta":{},"name":"PRODUCT_NAME","tags":[]},"STRENGTH":{"config":{},"constraints":[],"data_type":"VARCHAR","meta":{},"name":"STRENGTH","tags":[]},"UPDATED_AT_UTC":{"config":{},"constraints":[],"data_type":"TIMESTAMP_NTZ(9)","meta":{},"name":"UPDATED_AT_UTC","tags":[]}},"compiled":true,"compiled_code":"\n-- This model performs basic cleaning and renaming of the raw products table.\nwith source as (\n\n    select * from JHALL_SANDBOX.PQCMC_RAW.products\n\n),\n\nrenamed as (\n\n    select\n        -- Primary Key\n        product_id,\n\n        -- Attributes\n        product_name,\n        dosage_form,\n        strength,\n\n        -- Timestamps\n        created_at as created_at_utc,\n        updated_at as updated_at_utc\n\n    from source\n\n)\n\nselect * from renamed;","compiled_path":"target/compiled/models/staging/stg_products.sql","config":{"access":null,"alias":null,"auto_refresh":null,"backup":null,"batch_size":null,"begin":null,"bind":null,"catalog_name":null,"column_types":null,"concurrent_batches":null,"contract":null,"database":null,"docs":null,"enabled":true,"event_time":null,"freshness":null,"full_refresh":null,"grants":null,"group":null,"incremental_predicates":null,"incremental_strategy":null,"location":null,"lookback":null,"materialized":"view","merge_exclude_columns":null,"merge_update_columns":null,"meta":null,"on_configuration_change":null,"on_schema_change":null,"packages":null,"persist_docs":null,"post_hook":null,"pre_hook":null,"predicates":null,"quoting":{"database":false,"identifier":false,"schema":false},"schema":"pqcmc_staging","sql_header":null,"static_analysis":null,"table_format":null,"tags":["staging"],"unique_key":null},"constraints":[],"contract":{"alias_types":false,"enforced":false},"database":"JHALL_SANDBOX","depends_on":{"macros":[],"nodes":["source.pharma_cmc_quality.raw_quality_system.products"],"nodes_with_ref_location":[["source.pharma_cmc_quality.raw_quality_system.products",{"col":19,"expanded":null,"file":"models/staging/stg_products.sql","index":115,"line":5}]]},"fqn":["pharma_cmc_quality","staging","stg_products"],"language":"sql","metrics":[],"name":"stg_products","original_file_path":"models/staging/stg_products.sql","package_name":"pharma_cmc_quality","path":"models/staging/stg_products.sql","primary_key":[],"raw_code":"--placeholder--","refs":[],"relation_name":"JHALL_SANDBOX.RAW_pqcmc_staging.stg_products","resource_type":"model","schema":"RAW_pqcmc_staging","sources":[["raw_quality_system","products"]],"unique_id":"model.pharma_cmc_quality.stg_products","unrendered_config":{}},"model.pharma_cmc_quality.stg_specification_tests":{"alias":"stg_specification_tests","checksum":{"checksum":"761b09cf410495236f8f851f39826a3761c7abfec8aa8aab7522df09d17f0858","name":"SHA256"},"columns":{"ACCEPTANCE_CRITERIA":{"config":{},"constraints":[],"data_type":"VARCHAR","meta":{},"name":"ACCEPTANCE_CRITERIA","tags":[]},"CREATED_AT_UTC":{"config":{},"constraints":[],"data_type":"TIMESTAMP_NTZ(9)","meta":{},"name":"CREATED_AT_UTC","tags":[]},"SPEC_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"SPEC_ID","tags":[]},"SPEC_TEST_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"SPEC_TEST_ID","tags":[]},"TEST_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"TEST_ID","tags":[]}},"compiled":true,"compiled_code":"\n-- This model cleans the junction table between specifications and tests.\nwith source as (\n\n    select * from JHALL_SANDBOX.PQCMC_RAW.specification_tests\n\n),\n\nrenamed as (\n\n    select\n        -- Primary Key\n        spec_test_id,\n        -- Foreign Keys\n        spec_id,\n        test_id,\n        -- Attributes\n        acceptance_criteria,\n        -- Timestamps\n        created_at as created_at_utc\n\n    from source\n\n)\n\nselect * from renamed;","compiled_path":"target/compiled/models/staging/stg_specification_tests.sql","config":{"access":null,"alias":null,"auto_refresh":null,"backup":null,"batch_size":null,"begin":null,"bind":null,"catalog_name":null,"column_types":null,"concurrent_batches":null,"contract":null,"database":null,"docs":null,"enabled":true,"event_time":null,"freshness":null,"full_refresh":null,"grants":null,"group":null,"incremental_predicates":null,"incremental_strategy":null,"location":null,"lookback":null,"materialized":"view","merge_exclude_columns":null,"merge_update_columns":null,"meta":null,"on_configuration_change":null,"on_schema_change":null,"packages":null,"persist_docs":null,"post_hook":null,"pre_hook":null,"predicates":null,"quoting":{"database":false,"identifier":false,"schema":false},"schema":"pqcmc_staging","sql_header":null,"static_analysis":null,"table_format":null,"tags":["staging"],"unique_key":null},"constraints":[],"contract":{"alias_types":false,"enforced":false},"database":"JHALL_SANDBOX","depends_on":{"macros":[],"nodes":["source.pharma_cmc_quality.raw_quality_system.specification_tests"],"nodes_with_ref_location":[["source.pharma_cmc_quality.raw_quality_system.specification_tests",{"col":19,"expanded":null,"file":"models/staging/stg_specification_tests.sql","index":111,"line":5}]]},"fqn":["pharma_cmc_quality","staging","stg_specification_tests"],"language":"sql","metrics":[],"name":"stg_specification_tests","original_file_path":"models/staging/stg_specification_tests.sql","package_name":"pharma_cmc_quality","path":"models/staging/stg_specification_tests.sql","primary_key":[],"raw_code":"--placeholder--","refs":[],"relation_name":"JHALL_SANDBOX.RAW_pqcmc_staging.stg_specification_tests","resource_type":"model","schema":"RAW_pqcmc_staging","sources":[["raw_quality_system","specification_tests"]],"unique_id":"model.pharma_cmc_quality.stg_specification_tests","unrendered_config":{}},"model.pharma_cmc_quality.stg_specifications":{"alias":"stg_specifications","checksum":{"checksum":"367d0ebcc7a1eea988e3f34a20c38cce0db56e200e6d55aa3433c142b0aa9a55","name":"SHA256"},"columns":{"CREATED_AT_UTC":{"config":{},"constraints":[],"data_type":"TIMESTAMP_NTZ(9)","meta":{},"name":"CREATED_AT_UTC","tags":[]},"EFFECTIVE_DATE":{"config":{},"constraints":[],"data_type":"DATE","meta":{},"name":"EFFECTIVE_DATE","tags":[]},"SPEC_FOR_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"SPEC_FOR_ID","tags":[]},"SPEC_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"SPEC_ID","tags":[]},"SPEC_VERSION":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"SPEC_VERSION","tags":[]}},"compiled":true,"compiled_code":"\n-- This model performs basic cleaning and renaming of the raw specifications table.\nwith source as (\n\n    select * from JHALL_SANDBOX.PQCMC_RAW.specifications\n\n),\n\nrenamed as (\n\n    select\n        -- Primary Key\n        spec_id,\n        -- Foreign Keys\n        spec_for_id, -- This could be a material_id or product_id\n        -- Attributes\n        version as spec_version,\n        effective_date,\n\n        -- Timestamps\n        created_at as created_at_utc\n\n    from source\n\n)\n\nselect * from renamed;","compiled_path":"target/compiled/models/staging/stg_specifications.sql","config":{"access":null,"alias":null,"auto_refresh":null,"backup":null,"batch_size":null,"begin":null,"bind":null,"catalog_name":null,"column_types":null,"concurrent_batches":null,"contract":null,"database":null,"docs":null,"enabled":true,"event_time":null,"freshness":null,"full_refresh":null,"grants":null,"group":null,"incremental_predicates":null,"incremental_strategy":null,"location":null,"lookback":null,"materialized":"view","merge_exclude_columns":null,"merge_update_columns":null,"meta":null,"on_configuration_change":null,"on_schema_change":null,"packages":null,"persist_docs":null,"post_hook":null,"pre_hook":null,"predicates":null,"quoting":{"database":false,"identifier":false,"schema":false},"schema":"pqcmc_staging","sql_header":null,"static_analysis":null,"table_format":null,"tags":["staging"],"unique_key":null},"constraints":[],"contract":{"alias_types":false,"enforced":false},"database":"JHALL_SANDBOX","depends_on":{"macros":[],"nodes":["source.pharma_cmc_quality.raw_quality_system.specifications"],"nodes_with_ref_location":[["source.pharma_cmc_quality.raw_quality_system.specifications",{"col":19,"expanded":null,"file":"models/staging/stg_specifications.sql","index":121,"line":5}]]},"fqn":["pharma_cmc_quality","staging","stg_specifications"],"language":"sql","metrics":[],"name":"stg_specifications","original_file_path":"models/staging/stg_specifications.sql","package_name":"pharma_cmc_quality","path":"models/staging/stg_specifications.sql","primary_key":[],"raw_code":"--placeholder--","refs":[],"relation_name":"JHALL_SANDBOX.RAW_pqcmc_staging.stg_specifications","resource_type":"model","schema":"RAW_pqcmc_staging","sources":[["raw_quality_system","specifications"]],"unique_id":"model.pharma_cmc_quality.stg_specifications","unrendered_config":{}},"model.pharma_cmc_quality.stg_stability_lots":{"alias":"stg_stability_lots","checksum":{"checksum":"8f4f6bface4e5b4c744cd691d174fd39cd3f329cae0505a963330c5e4a94cfb9","name":"SHA256"},"columns":{"ADDED_TO_STUDY_AT_UTC":{"config":{},"constraints":[],"data_type":"TIMESTAMP_NTZ(9)","meta":{},"name":"ADDED_TO_STUDY_AT_UTC","tags":[]},"LOT_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"LOT_ID","tags":[]},"STUDY_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"STUDY_ID","tags":[]}},"compiled":true,"compiled_code":"-- This model cleans the junction table for stability studies and lots.\nwith source as (\n\n    select * from JHALL_SANDBOX.PQCMC_RAW.stability_lots\n\n),\n\nrenamed as (\n\n    select\n        -- Foreign Keys\n        study_id,\n        lot_id,\n        -- Timestamps\n        added_at as added_to_study_at_utc\n\n    from source\n\n)\n\nselect * from renamed;","compiled_path":"target/compiled/models/staging/stg_stability_lots.sql","config":{"access":null,"alias":null,"auto_refresh":null,"backup":null,"batch_size":null,"begin":null,"bind":null,"catalog_name":null,"column_types":null,"concurrent_batches":null,"contract":null,"database":null,"docs":null,"enabled":true,"event_time":null,"freshness":null,"full_refresh":null,"grants":null,"group":null,"incremental_predicates":null,"incremental_strategy":null,"location":null,"lookback":null,"materialized":"view","merge_exclude_columns":null,"merge_update_columns":null,"meta":null,"on_configuration_change":null,"on_schema_change":null,"packages":null,"persist_docs":null,"post_hook":null,"pre_hook":null,"predicates":null,"quoting":{"database":false,"identifier":false,"schema":false},"schema":"pqcmc_staging","sql_header":null,"static_analysis":null,"table_format":null,"tags":["staging"],"unique_key":null},"constraints":[],"contract":{"alias_types":false,"enforced":false},"database":"JHALL_SANDBOX","depends_on":{"macros":[],"nodes":["source.pharma_cmc_quality.raw_quality_system.stability_lots"],"nodes_with_ref_location":[["source.pharma_cmc_quality.raw_quality_system.stability_lots",{"col":19,"expanded":null,"file":"models/staging/stg_stability_lots.sql","index":108,"line":4}]]},"fqn":["pharma_cmc_quality","staging","stg_stability_lots"],"language":"sql","metrics":[],"name":"stg_stability_lots","original_file_path":"models/staging/stg_stability_lots.sql","package_name":"pharma_cmc_quality","path":"models/staging/stg_stability_lots.sql","primary_key":[],"raw_code":"--placeholder--","refs":[],"relation_name":"JHALL_SANDBOX.RAW_pqcmc_staging.stg_stability_lots","resource_type":"model","schema":"RAW_pqcmc_staging","sources":[["raw_quality_system","stability_lots"]],"unique_id":"model.pharma_cmc_quality.stg_stability_lots","unrendered_config":{}},"model.pharma_cmc_quality.stg_stability_results":{"alias":"stg_stability_results","checksum":{"checksum":"fbaae950848bed7715131f54e4aeeab8c17eea1f99a1768ac6b438440b337b0f","name":"SHA256"},"columns":{"LOT_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"LOT_ID","tags":[]},"PULL_DATE":{"config":{},"constraints":[],"data_type":"VARCHAR","meta":{},"name":"PULL_DATE","tags":[]},"RESULT_VALUE":{"config":{},"constraints":[],"data_type":"VARCHAR","meta":{},"name":"RESULT_VALUE","tags":[]},"STABILITY_RESULT_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"STABILITY_RESULT_ID","tags":[]},"STORAGE_CONDITION":{"config":{},"constraints":[],"data_type":"VARCHAR","meta":{},"name":"STORAGE_CONDITION","tags":[]},"STUDY_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"STUDY_ID","tags":[]},"TESTED_AT_UTC":{"config":{},"constraints":[],"data_type":"TIMESTAMP_NTZ(9)","meta":{},"name":"TESTED_AT_UTC","tags":[]},"TEST_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"TEST_ID","tags":[]},"TIMEPOINT":{"config":{},"constraints":[],"data_type":"VARCHAR","meta":{},"name":"TIMEPOINT","tags":[]}},"compiled":true,"compiled_code":"-- This model cleans the raw stability results data.\nwith source as (\n\n    select * from JHALL_SANDBOX.PQCMC_RAW.stability_results\n\n),\n\nrenamed as (\n\n    select\n        -- Primary Key\n        stability_result_id,\n        -- Foreign Keys\n        study_id,\n        lot_id,\n        test_id,\n        -- Attributes\n        storage_condition,\n        timepoint,\n        result_value,\n        -- Timestamps\n        pull_date,\n        tested_at as tested_at_utc\n\n    from source\n\n)\n\nselect * from renamed;","compiled_path":"target/compiled/models/staging/stg_stability_results.sql","config":{"access":null,"alias":null,"auto_refresh":null,"backup":null,"batch_size":null,"begin":null,"bind":null,"catalog_name":null,"column_types":null,"concurrent_batches":null,"contract":null,"database":null,"docs":null,"enabled":true,"event_time":null,"freshness":null,"full_refresh":null,"grants":null,"group":null,"incremental_predicates":null,"incremental_strategy":null,"location":null,"lookback":null,"materialized":"view","merge_exclude_columns":null,"merge_update_columns":null,"meta":null,"on_configuration_change":null,"on_schema_change":null,"packages":null,"persist_docs":null,"post_hook":null,"pre_hook":null,"predicates":null,"quoting":{"database":false,"identifier":false,"schema":false},"schema":"pqcmc_staging","sql_header":null,"static_analysis":null,"table_format":null,"tags":["staging"],"unique_key":null},"constraints":[],"contract":{"alias_types":false,"enforced":false},"database":"JHALL_SANDBOX","depends_on":{"macros":[],"nodes":["source.pharma_cmc_quality.raw_quality_system.stability_results"],"nodes_with_ref_location":[["source.pharma_cmc_quality.raw_quality_system.stability_results",{"col":19,"expanded":null,"file":"models/staging/stg_stability_results.sql","index":89,"line":4}]]},"fqn":["pharma_cmc_quality","staging","stg_stability_results"],"language":"sql","metrics":[],"name":"stg_stability_results","original_file_path":"models/staging/stg_stability_results.sql","package_name":"pharma_cmc_quality","path":"models/staging/stg_stability_results.sql","primary_key":[],"raw_code":"--placeholder--","refs":[],"relation_name":"JHALL_SANDBOX.RAW_pqcmc_staging.stg_stability_results","resource_type":"model","schema":"RAW_pqcmc_staging","sources":[["raw_quality_system","stability_results"]],"unique_id":"model.pharma_cmc_quality.stg_stability_results","unrendered_config":{}},"model.pharma_cmc_quality.stg_stability_studies":{"alias":"stg_stability_studies","checksum":{"checksum":"10fd93049ce85e59919104df54596b5f929a334c9f4e2330f25cf88de9ed573f","name":"SHA256"},"columns":{"CREATED_AT_UTC":{"config":{},"constraints":[],"data_type":"TIMESTAMP_NTZ(9)","meta":{},"name":"CREATED_AT_UTC","tags":[]},"PRODUCT_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"PRODUCT_ID","tags":[]},"PROTOCOL_NUMBER":{"config":{},"constraints":[],"data_type":"VARCHAR","meta":{},"name":"PROTOCOL_NUMBER","tags":[]},"STUDY_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"STUDY_ID","tags":[]},"STUDY_START_DATE":{"config":{},"constraints":[],"data_type":"DATE","meta":{},"name":"STUDY_START_DATE","tags":[]}},"compiled":true,"compiled_code":"-- This model cleans the raw stability studies data.\nwith source as (\n\n    select * from JHALL_SANDBOX.PQCMC_RAW.stability_studies\n\n),\n\nrenamed as (\n\n    select\n        -- Primary Key\n        study_id,\n        -- Foreign Key\n        product_id,\n        -- Attributes\n        protocol_number, \n        -- Timestamps\n        start_date as study_start_date,\n        created_at as created_at_utc\n\n    from source\n\n)\n\nselect * from renamed;","compiled_path":"target/compiled/models/staging/stg_stability_studies.sql","config":{"access":null,"alias":null,"auto_refresh":null,"backup":null,"batch_size":null,"begin":null,"bind":null,"catalog_name":null,"column_types":null,"concurrent_batches":null,"contract":null,"database":null,"docs":null,"enabled":true,"event_time":null,"freshness":null,"full_refresh":null,"grants":null,"group":null,"incremental_predicates":null,"incremental_strategy":null,"location":null,"lookback":null,"materialized":"view","merge_exclude_columns":null,"merge_update_columns":null,"meta":null,"on_configuration_change":null,"on_schema_change":null,"packages":null,"persist_docs":null,"post_hook":null,"pre_hook":null,"predicates":null,"quoting":{"database":false,"identifier":false,"schema":false},"schema":"pqcmc_staging","sql_header":null,"static_analysis":null,"table_format":null,"tags":["staging"],"unique_key":null},"constraints":[],"contract":{"alias_types":false,"enforced":false},"database":"JHALL_SANDBOX","depends_on":{"macros":[],"nodes":["source.pharma_cmc_quality.raw_quality_system.stability_studies"],"nodes_with_ref_location":[["source.pharma_cmc_quality.raw_quality_system.stability_studies",{"col":19,"expanded":null,"file":"models/staging/stg_stability_studies.sql","index":89,"line":4}]]},"fqn":["pharma_cmc_quality","staging","stg_stability_studies"],"language":"sql","metrics":[],"name":"stg_stability_studies","original_file_path":"models/staging/stg_stability_studies.sql","package_name":"pharma_cmc_quality","path":"models/staging/stg_stability_studies.sql","primary_key":[],"raw_code":"--placeholder--","refs":[],"relation_name":"JHALL_SANDBOX.RAW_pqcmc_staging.stg_stability_studies","resource_type":"model","schema":"RAW_pqcmc_staging","sources":[["raw_quality_system","stability_studies"]],"unique_id":"model.pharma_cmc_quality.stg_stability_studies","unrendered_config":{}},"model.pharma_cmc_quality.stg_test_results":{"alias":"stg_test_results","checksum":{"checksum":"d6da5aefe81ae71957005100b88b24df0ca6400d0ba4125888a7aae497a31e6a","name":"SHA256"},"columns":{"LOT_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"LOT_ID","tags":[]},"RESULT_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"RESULT_ID","tags":[]},"RESULT_STATUS":{"config":{},"constraints":[],"data_type":"VARCHAR","meta":{},"name":"RESULT_STATUS","tags":[]},"RESULT_VALUE":{"config":{},"constraints":[],"data_type":"VARCHAR","meta":{},"name":"RESULT_VALUE","tags":[]},"SPEC_TEST_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"SPEC_TEST_ID","tags":[]},"TESTED_AT_UTC":{"config":{},"constraints":[],"data_type":"TIMESTAMP_NTZ(9)","meta":{},"name":"TESTED_AT_UTC","tags":[]}},"compiled":true,"compiled_code":"-- This model cleans the raw test results data.\nwith source as (\n\n    select * from JHALL_SANDBOX.PQCMC_RAW.test_results\n\n),\n\nrenamed as (\n\n    select\n        -- Primary Key\n        result_id,\n\n        -- Foreign Keys\n        lot_id,\n        spec_test_id,\n\n        -- Attributes\n        result_value,\n        result_status,\n\n        -- Timestamps\n        tested_at as tested_at_utc\n\n    from source\n\n)\n\nselect * from renamed;","compiled_path":"target/compiled/models/staging/stg_test_results.sql","config":{"access":null,"alias":null,"auto_refresh":null,"backup":null,"batch_size":null,"begin":null,"bind":null,"catalog_name":null,"column_types":null,"concurrent_batches":null,"contract":null,"database":null,"docs":null,"enabled":true,"event_time":null,"freshness":null,"full_refresh":null,"grants":null,"group":null,"incremental_predicates":null,"incremental_strategy":null,"location":null,"lookback":null,"materialized":"view","merge_exclude_columns":null,"merge_update_columns":null,"meta":null,"on_configuration_change":null,"on_schema_change":null,"packages":null,"persist_docs":null,"post_hook":null,"pre_hook":null,"predicates":null,"quoting":{"database":false,"identifier":false,"schema":false},"schema":"pqcmc_staging","sql_header":null,"static_analysis":null,"table_format":null,"tags":["staging"],"unique_key":null},"constraints":[],"contract":{"alias_types":false,"enforced":false},"database":"JHALL_SANDBOX","depends_on":{"macros":[],"nodes":["source.pharma_cmc_quality.raw_quality_system.test_results"],"nodes_with_ref_location":[["source.pharma_cmc_quality.raw_quality_system.test_results",{"col":19,"expanded":null,"file":"models/staging/stg_test_results.sql","index":84,"line":4}]]},"fqn":["pharma_cmc_quality","staging","stg_test_results"],"language":"sql","metrics":[],"name":"stg_test_results","original_file_path":"models/staging/stg_test_results.sql","package_name":"pharma_cmc_quality","path":"models/staging/stg_test_results.sql","primary_key":[],"raw_code":"--placeholder--","refs":[],"relation_name":"JHALL_SANDBOX.RAW_pqcmc_staging.stg_test_results","resource_type":"model","schema":"RAW_pqcmc_staging","sources":[["raw_quality_system","test_results"]],"unique_id":"model.pharma_cmc_quality.stg_test_results","unrendered_config":{}},"model.pharma_cmc_quality.stg_tests":{"alias":"stg_tests","checksum":{"checksum":"1bb0b515ffface1228b078be89a203439140832be27d43ec3f7abb46947f407f","name":"SHA256"},"columns":{"CREATED_AT_UTC":{"config":{},"constraints":[],"data_type":"TIMESTAMP_NTZ(9)","meta":{},"name":"CREATED_AT_UTC","tags":[]},"TEST_ID":{"config":{},"constraints":[],"data_type":"NUMBER(38,0)","meta":{},"name":"TEST_ID","tags":[]},"TEST_METHOD_DOCUMENT":{"config":{},"constraints":[],"data_type":"VARCHAR","meta":{},"name":"TEST_METHOD_DOCUMENT","tags":[]},"TEST_NAME":{"config":{},"constraints":[],"data_type":"VARCHAR","meta":{},"name":"TEST_NAME","tags":[]}},"compiled":true,"compiled_code":"-- This model performs basic cleaning and renaming of the raw tests table.\nwith source as (\n\n    select * from JHALL_SANDBOX.PQCMC_RAW.tests\n\n),\n\nrenamed as (\n\n    select\n        -- Primary Key\n        test_id,\n\n        -- Attributes\n        test_name,\n        test_method_document,\n\n        -- Timestamps\n        created_at as created_at_utc\n\n    from source\n\n)\n\nselect * from renamed;","compiled_path":"target/compiled/models/staging/stg_tests.sql","config":{"access":null,"alias":null,"auto_refresh":null,"backup":null,"batch_size":null,"begin":null,"bind":null,"catalog_name":null,"column_types":null,"concurrent_batches":null,"contract":null,"database":null,"docs":null,"enabled":true,"event_time":null,"freshness":null,"full_refresh":null,"grants":null,"group":null,"incremental_predicates":null,"incremental_strategy":null,"location":null,"lookback":null,"materialized":"view","merge_exclude_columns":null,"merge_update_columns":null,"meta":null,"on_configuration_change":null,"on_schema_change":null,"packages":null,"persist_docs":null,"post_hook":null,"pre_hook":null,"predicates":null,"quoting":{"database":false,"identifier":false,"schema":false},"schema":"pqcmc_staging","sql_header":null,"static_analysis":null,"table_format":null,"tags":["staging"],"unique_key":null},"constraints":[],"contract":{"alias_types":false,"enforced":false},"database":"JHALL_SANDBOX","depends_on":{"macros":[],"nodes":["source.pharma_cmc_quality.raw_quality_system.tests"],"nodes_with_ref_location":[["source.pharma_cmc_quality.raw_quality_system.tests",{"col":19,"expanded":null,"file":"models/staging/stg_tests.sql","index":111,"line":4}]]},"fqn":["pharma_cmc_quality","staging","stg_tests"],"language":"sql","metrics":[],"name":"stg_tests","original_file_path":"models/staging/stg_tests.sql","package_name":"pharma_cmc_quality","path":"models/staging/stg_tests.sql","primary_key":[],"raw_code":"--placeholder--","refs":[],"relation_name":"JHALL_SANDBOX.RAW_pqcmc_staging.stg_tests","resource_type":"model","schema":"RAW_pqcmc_staging","sources":[["raw_quality_system","tests"]],"unique_id":"model.pharma_cmc_quality.stg_tests","unrendered_config":{}}},"parent_map":{},"saved_queries":{},"selectors":{},"semantic_models":{},"sources":{"source.pharma_cmc_quality.raw_quality_system.lots":{"columns":{},"config":{"enabled":true,"quoting":{"database":false,"identifier":false,"schema":false}},"database":"JHALL_SANDBOX","description":"Manufacturing lots/batches.","fqn":["pharma_cmc_quality","sources","lots"],"identifier":"lots","loaded_at_field":"","loaded_at_query":"","loader":"","name":"lots","original_file_path":"models/sources/sources.yml","package_name":"pharma_cmc_quality","patch_path":"models/sources/sources.yml","path":"models/sources/sources.yml","quoting":{"database":false,"identifier":false,"schema":false},"relation_name":"JHALL_SANDBOX.PQCMC_RAW.lots","resource_type":"source","schema":"PQCMC_RAW","source_description":"Source database for the pharmaceutical quality system.","source_name":"raw_quality_system","unique_id":"source.pharma_cmc_quality.raw_quality_system.lots","unrendered_config":{}},"source.pharma_cmc_quality.raw_quality_system.materials":{"columns":{},"config":{"enabled":true,"quoting":{"database":false,"identifier":false,"schema":false}},"database":"JHALL_SANDBOX","description":"Raw materials and APIs.","fqn":["pharma_cmc_quality","sources","materials"],"identifier":"materials","loaded_at_field":"","loaded_at_query":"","loader":"","name":"materials","original_file_path":"models/sources/sources.yml","package_name":"pharma_cmc_quality","patch_path":"models/sources/sources.yml","path":"models/sources/sources.yml","quoting":{"database":false,"identifier":false,"schema":false},"relation_name":"JHALL_SANDBOX.PQCMC_RAW.materials","resource_type":"source","schema":"PQCMC_RAW","source_description":"Source database for the pharmaceutical quality system.","source_name":"raw_quality_system","unique_id":"source.pharma_cmc_quality.raw_quality_system.materials","unrendered_config":{}},"source.pharma_cmc_quality.raw_quality_system.products":{"columns":{},"config":{"enabled":true,"quoting":{"database":false,"identifier":false,"schema":false}},"database":"JHALL_SANDBOX","description":"Finished drug products.","fqn":["pharma_cmc_quality","sources","products"],"identifier":"products","loaded_at_field":"","loaded_at_query":"","loader":"","name":"products","original_file_path":"models/sources/sources.yml","package_name":"pharma_cmc_quality","patch_path":"models/sources/sources.yml","path":"models/sources/sources.yml","quoting":{"database":false,"identifier":false,"schema":false},"relation_name":"JHALL_SANDBOX.PQCMC_RAW.products","resource_type":"source","schema":"PQCMC_RAW","source_description":"Source database for the pharmaceutical quality system.","source_name":"raw_quality_system","unique_id":"source.pharma_cmc_quality.raw_quality_system.products","unrendered_config":{}},"source.pharma_cmc_quality.raw_quality_system.specification_tests":{"columns":{},"config":{"enabled":true,"quoting":{"database":false,"identifier":false,"schema":false}},"database":"JHALL_SANDBOX","description":"Joining table for specs and tests.","fqn":["pharma_cmc_quality","sources","specification_tests"],"identifier":"specification_tests","loaded_at_field":"","loaded_at_query":"","loader":"","name":"specification_tests","original_file_path":"models/sources/sources.yml","package_name":"pharma_cmc_quality","patch_path":"models/sources/sources.yml","path":"models/sources/sources.yml","quoting":{"database":false,"identifier":false,"schema":false},"relation_name":"JHALL_SANDBOX.PQCMC_RAW.specification_tests","resource_type":"source","schema":"PQCMC_RAW","source_description":"Source database for the pharmaceutical quality system.","source_name":"raw_quality_system","unique_id":"source.pharma_cmc_quality.raw_quality_system.specification_tests","unrendered_config":{}},"source.pharma_cmc_quality.raw_quality_system.specifications":{"columns":{},"config":{"enabled":true,"quoting":{"database":false,"identifier":false,"schema":false}},"database":"JHALL_SANDBOX","description":"Specifications for materials and products.","fqn":["pharma_cmc_quality","sources","specifications"],"identifier":"specifications","loaded_at_field":"","loaded_at_query":"","loader":"","name":"specifications","original_file_path":"models/sources/sources.yml","package_name":"pharma_cmc_quality","patch_path":"models/sources/sources.yml","path":"models/sources/sources.yml","quoting":{"database":false,"identifier":false,"schema":false},"relation_name":"JHALL_SANDBOX.PQCMC_RAW.specifications","resource_type":"source","schema":"PQCMC_RAW","source_description":"Source database for the pharmaceutical quality system.","source_name":"raw_quality_system","unique_id":"source.pharma_cmc_quality.raw_quality_system.specifications","unrendered_config":{}},"source.pharma_cmc_quality.raw_quality_system.stability_lots":{"columns":{},"config":{"enabled":true,"quoting":{"database":false,"identifier":false,"schema":false}},"database":"JHALL_SANDBOX","description":"Lots included in stability studies.","fqn":["pharma_cmc_quality","sources","stability_lots"],"identifier":"stability_lots","loaded_at_field":"","loaded_at_query":"","loader":"","name":"stability_lots","original_file_path":"models/sources/sources.yml","package_name":"pharma_cmc_quality","patch_path":"models/sources/sources.yml","path":"models/sources/sources.yml","quoting":{"database":false,"identifier":false,"schema":false},"relation_name":"JHALL_SANDBOX.PQCMC_RAW.stability_lots","resource_type":"source","schema":"PQCMC_RAW","source_description":"Source database for the pharmaceutical quality system.","source_name":"raw_quality_system","unique_id":"source.pharma_cmc_quality.raw_quality_system.stability_lots","unrendered_config":{}},"source.pharma_cmc_quality.raw_quality_system.stability_results":{"columns":{},"config":{"enabled":true,"quoting":{"database":false,"identifier":false,"schema":false}},"database":"JHALL_SANDBOX","description":"Stability test results.","fqn":["pharma_cmc_quality","sources","stability_results"],"identifier":"stability_results","loaded_at_field":"","loaded_at_query":"","loader":"","name":"stability_results","original_file_path":"models/sources/sources.yml","package_name":"pharma_cmc_quality","patch_path":"models/sources/sources.yml","path":"models/sources/sources.yml","quoting":{"database":false,"identifier":false,"schema":false},"relation_name":"JHALL_SANDBOX.PQCMC_RAW.stability_results","resource_type":"source","schema":"PQCMC_RAW","source_description":"Source database for the pharmaceutical quality system.","source_name":"raw_quality_system","unique_id":"source.pharma_cmc_quality.raw_quality_system.stability_results","unrendered_config":{}},"source.pharma_cmc_quality.raw_quality_system.stability_studies":{"columns":{},"config":{"enabled":true,"quoting":{"database":false,"identifier":false,"schema":false}},"database":"JHALL_SANDBOX","description":"Stability study protocols.","fqn":["pharma_cmc_quality","sources","stability_studies"],"identifier":"stability_studies","loaded_at_field":"","loaded_at_query":"","loader":"","name":"stability_studies","original_file_path":"models/sources/sources.yml","package_name":"pharma_cmc_quality","patch_path":"models/sources/sources.yml","path":"models/sources/sources.yml","quoting":{"database":false,"identifier":false,"schema":false},"relation_name":"JHALL_SANDBOX.PQCMC_RAW.stability_studies","resource_type":"source","schema":"PQCMC_RAW","source_description":"Source database for the pharmaceutical quality system.","source_name":"raw_quality_system","unique_id":"source.pharma_cmc_quality.raw_quality_system.stability_studies","unrendered_config":{}},"source.pharma_cmc_quality.raw_quality_system.test_results":{"columns":{},"config":{"enabled":true,"quoting":{"database":false,"identifier":false,"schema":false}},"database":"JHALL_SANDBOX","description":"QC test results for lots.","fqn":["pharma_cmc_quality","sources","test_results"],"identifier":"test_results","loaded_at_field":"","loaded_at_query":"","loader":"","name":"test_results","original_file_path":"models/sources/sources.yml","package_name":"pharma_cmc_quality","patch_path":"models/sources/sources.yml","path":"models/sources/sources.yml","quoting":{"database":false,"identifier":false,"schema":false},"relation_name":"JHALL_SANDBOX.PQCMC_RAW.test_results","resource_type":"source","schema":"PQCMC_RAW","source_description":"Source database for the pharmaceutical quality system.","source_name":"raw_quality_system","unique_id":"source.pharma_cmc_quality.raw_quality_system.test_results","unrendered_config":{}},"source.pharma_cmc_quality.raw_quality_system.tests":{"columns":{},"config":{"enabled":true,"quoting":{"database":false,"identifier":false,"schema":false}},"database":"JHALL_SANDBOX","description":"Master list of analytical test procedures.","fqn":["pharma_cmc_quality","sources","tests"],"identifier":"tests","loaded_at_field":"","loaded_at_query":"","loader":"","name":"tests","original_file_path":"models/sources/sources.yml","package_name":"pharma_cmc_quality","patch_path":"models/sources/sources.yml","path":"models/sources/sources.yml","quoting":{"database":false,"identifier":false,"schema":false},"relation_name":"JHALL_SANDBOX.PQCMC_RAW.tests","resource_type":"source","schema":"PQCMC_RAW","source_description":"Source database for the pharmaceutical quality system.","source_name":"raw_quality_system","unique_id":"source.pharma_cmc_quality.raw_quality_system.tests","unrendered_config":{}}},"unit_tests":{}}